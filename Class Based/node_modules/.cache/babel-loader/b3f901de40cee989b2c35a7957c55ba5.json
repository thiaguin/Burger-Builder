{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const orderMade = () => {\n  return {\n    type: actionTypes.ORDER_MADE\n  };\n};\n\nconst purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\n\nconst purchaseBurgerFail = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL\n  };\n};\n\nconst purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\n\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail());\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\n\nconst fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\n\nconst fetchOrdersSuccess = orders => {\n  console.log('actions', orders);\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    fetchedOrders: orders\n  };\n};\n\nconst fetchOrdersFail = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL\n  };\n};\n\nexport const fetchOrders = () => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    axios.get('/orders.json').then(res => {\n      const orders = [];\n\n      for (const key in res.data) {\n        orders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(orders));\n    }).catch(() => {\n      dispatch(fetchOrdersFail());\n    });\n  };\n};","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/src/store/actions/order.js"],"names":["actionTypes","axios","orderMade","type","ORDER_MADE","purchaseBurgerSuccess","id","orderData","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","data","name","catch","error","purchaseInit","PURCHASE_INIT","fetchOrdersStart","FETCH_ORDERS_START","fetchOrdersSuccess","orders","console","log","FETCH_ORDERS_SUCCESS","fetchedOrders","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrders","get","res","key","push"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADf,GAAP;AAGH,CAJM;;AAMP,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AAC7C,SAAO;AACHJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,uBADf;AAEHC,IAAAA,OAAO,EAAEH,EAFN;AAGHC,IAAAA,SAAS,EAAEA;AAHR,GAAP;AAKH,CAND;;AAQA,MAAMG,kBAAkB,GAAG,MAAM;AAC7B,SAAO;AACHP,IAAAA,IAAI,EAAEH,WAAW,CAACW;AADf,GAAP;AAGH,CAJD;;AAKA,MAAMC,mBAAmB,GAAG,MAAM;AAC9B,SAAO;AACHT,IAAAA,IAAI,EAAEH,WAAW,CAACa;AADf,GAAP;AAGH,CAJD;;AAMA,OAAO,MAAMC,cAAc,GAAIP,SAAD,IAAe;AACzC,SAAQQ,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACAX,IAAAA,KAAK,CACAe,IADL,CACU,cADV,EAC0BT,SAD1B,EAEKU,IAFL,CAEWC,QAAD,IAAc;AAChBH,MAAAA,QAAQ,CAACV,qBAAqB,CAACa,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBb,SAArB,CAAtB,CAAR;AACH,KAJL,EAKKc,KALL,CAKYC,KAAD,IAAW;AACdP,MAAAA,QAAQ,CAACL,kBAAkB,EAAnB,CAAR;AACH,KAPL;AAQH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMa,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHpB,IAAAA,IAAI,EAAEH,WAAW,CAACwB;AADf,GAAP;AAGH,CAJM;;AAMP,MAAMC,gBAAgB,GAAG,MAAM;AAC3B,SAAO;AACHtB,IAAAA,IAAI,EAAEH,WAAW,CAAC0B;AADf,GAAP;AAGH,CAJD;;AAMA,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,SAAO;AACHzB,IAAAA,IAAI,EAAEH,WAAW,CAAC+B,oBADf;AAEHC,IAAAA,aAAa,EAAEJ;AAFZ,GAAP;AAIH,CAND;;AAOA,MAAMK,eAAe,GAAG,MAAM;AAC1B,SAAO;AACH9B,IAAAA,IAAI,EAAEH,WAAW,CAACkC;AADf,GAAP;AAGH,CAJD;;AAMA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAQpB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACU,gBAAgB,EAAjB,CAAR;AACAxB,IAAAA,KAAK,CACAmC,GADL,CACS,cADT,EAEKnB,IAFL,CAEWoB,GAAD,IAAS;AACX,YAAMT,MAAM,GAAG,EAAf;;AACA,WAAK,MAAMU,GAAX,IAAkBD,GAAG,CAAClB,IAAtB,EAA4B;AACxBS,QAAAA,MAAM,CAACW,IAAP,CAAY,EACR,GAAGF,GAAG,CAAClB,IAAJ,CAASmB,GAAT,CADK;AAERhC,UAAAA,EAAE,EAAEgC;AAFI,SAAZ;AAIH;;AACDvB,MAAAA,QAAQ,CAACY,kBAAkB,CAACC,MAAD,CAAnB,CAAR;AACH,KAXL,EAYKP,KAZL,CAYW,MAAM;AACTN,MAAAA,QAAQ,CAACkB,eAAe,EAAhB,CAAR;AACH,KAdL;AAeH,GAjBD;AAkBH,CAnBM","sourcesContent":["import * as actionTypes from './actionTypes'\nimport axios from '../../axios-orders'\n\nexport const orderMade = () => {\n    return {\n        type: actionTypes.ORDER_MADE,\n    }\n}\n\nconst purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id,\n        orderData: orderData,\n    }\n}\n\nconst purchaseBurgerFail = () => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n    }\n}\nconst purchaseBurgerStart = () => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_START,\n    }\n}\n\nexport const purchaseBurger = (orderData) => {\n    return (dispatch) => {\n        dispatch(purchaseBurgerStart())\n        axios\n            .post('/orders.json', orderData)\n            .then((response) => {\n                dispatch(purchaseBurgerSuccess(response.data.name, orderData))\n            })\n            .catch((error) => {\n                dispatch(purchaseBurgerFail())\n            })\n    }\n}\n\nexport const purchaseInit = () => {\n    return {\n        type: actionTypes.PURCHASE_INIT,\n    }\n}\n\nconst fetchOrdersStart = () => {\n    return {\n        type: actionTypes.FETCH_ORDERS_START,\n    }\n}\n\nconst fetchOrdersSuccess = (orders) => {\n    console.log('actions', orders)\n    return {\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\n        fetchedOrders: orders,\n    }\n}\nconst fetchOrdersFail = () => {\n    return {\n        type: actionTypes.FETCH_ORDERS_FAIL,\n    }\n}\n\nexport const fetchOrders = () => {\n    return (dispatch) => {\n        dispatch(fetchOrdersStart())\n        axios\n            .get('/orders.json')\n            .then((res) => {\n                const orders = []\n                for (const key in res.data) {\n                    orders.push({\n                        ...res.data[key],\n                        id: key,\n                    })\n                }\n                dispatch(fetchOrdersSuccess(orders))\n            })\n            .catch(() => {\n                dispatch(fetchOrdersFail())\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}