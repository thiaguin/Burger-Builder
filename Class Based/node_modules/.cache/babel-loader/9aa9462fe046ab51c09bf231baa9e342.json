{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  ingredients: null,\n  price: 4,\n  error: false\n};\nconst INGREDIENTS_PRICE = {\n  salad: 1,\n  cheese: 1,\n  bacon: 1.5,\n  meat: 2\n};\n\nconst addIngredient = (state, action) => {\n  return { ...state,\n    ingredients: { ...state.ingredients,\n      [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n    },\n    price: state.price + INGREDIENTS_PRICE[action.ingredientName]\n  };\n};\n\nconst removeIngredient = (state, action) => {\n  const qntIngredient = state.ingredients[action.ingredientName];\n  const priceUpdated = state.price - INGREDIENTS_PRICE[action.ingredientName];\n  return { ...state,\n    ingredients: { ...state.ingredients,\n      [action.ingredientName]: qntIngredient > 0 ? qntIngredient - 1 : 0\n    },\n    price: qntIngredient > 0 ? priceUpdated : state.price\n  };\n};\n\nconst initIngredients = (state, action) => {\n  return { ...state,\n    ingredients: {\n      salad: action.ingredientsFetched.salad,\n      cheese: action.ingredientsFetched.cheese,\n      bacon: action.ingredientsFetched.bacon,\n      meat: action.ingredientsFetched.meat\n    },\n    price: 4\n  };\n};\n\nconst initIngredientsFail = state => {\n  return { ...state,\n    error: true,\n    ingredients: null\n  };\n};\n\nconst defaultState = state => {\n  return { ...state,\n    ingredients: { ...state.ingredients\n    }\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENT:\n      return addIngredient(state, action);\n\n    case actionTypes.REMOVE_INGREDIENT:\n      return removeIngredient(state, action);\n\n    case actionTypes.INIT_INGREDIENTS_SUCCESS:\n      return initIngredients(state, action);\n\n    case actionTypes.INIT_INGREDIENTS_FAIL:\n    default:\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","initialState","ingredients","price","error","INGREDIENTS_PRICE","salad","cheese","bacon","meat","addIngredient","state","action","ingredientName","removeIngredient","qntIngredient","priceUpdated","initIngredients","ingredientsFetched","initIngredientsFail","defaultState","reducer","type","ADD_INGREDIENT","REMOVE_INGREDIENT","INIT_INGREDIENTS_SUCCESS","INIT_INGREDIENTS_FAIL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    ingredients: null,\n    price: 4,\n    error: false,\n}\n\nconst INGREDIENTS_PRICE = {\n    salad: 1,\n    cheese: 1,\n    bacon: 1.5,\n    meat: 2,\n}\n\nconst addIngredient = (state, action) => {\n    return {\n        ...state,\n        ingredients: {\n            ...state.ingredients,\n            [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\n        },\n        price: state.price + INGREDIENTS_PRICE[action.ingredientName],\n    }\n}\n\nconst removeIngredient = (state, action) => {\n    const qntIngredient = state.ingredients[action.ingredientName]\n    const priceUpdated = state.price - INGREDIENTS_PRICE[action.ingredientName]\n    return {\n        ...state,\n        ingredients: {\n            ...state.ingredients,\n            [action.ingredientName]: qntIngredient > 0 ? qntIngredient - 1 : 0,\n        },\n        price: qntIngredient > 0 ? priceUpdated : state.price,\n    }\n}\n\nconst initIngredients = (state, action) => {\n    return {\n        ...state,\n        ingredients: {\n            salad: action.ingredientsFetched.salad,\n            cheese: action.ingredientsFetched.cheese,\n            bacon: action.ingredientsFetched.bacon,\n            meat: action.ingredientsFetched.meat,\n        },\n        price: 4,\n    }\n}\n\nconst initIngredientsFail = (state) => {\n    return {\n        ...state,\n        error: true,\n        ingredients: null,\n    }\n}\n\nconst defaultState = (state) => {\n    return {\n        ...state,\n        ingredients: {\n            ...state.ingredients,\n        },\n    }\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_INGREDIENT:\n            return addIngredient(state, action)\n        case actionTypes.REMOVE_INGREDIENT:\n            return removeIngredient(state, action)\n        case actionTypes.INIT_INGREDIENTS_SUCCESS:\n            return initIngredients(state, action)\n        case actionTypes.INIT_INGREDIENTS_FAIL:\n        default:\n    }\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}