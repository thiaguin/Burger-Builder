{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Class Based/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { validateForm } from '../../util/util';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Aux from '../../hoc/Aux';\nimport * as actions from '../../store/actions/index';\nimport './Auth.css';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        name: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Username'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          config: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 15\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      validForm: false\n    };\n\n    this.inputChangeHandler = (event, inputElement) => {\n      const rules = this.state.controls[inputElement].validation;\n      const updatedControls = { ...this.state.controls,\n        [inputElement]: { ...this.state.controls[inputElement],\n          value: event.target.value,\n          valid: validateForm(event.target.value, rules),\n          touched: true\n        }\n      };\n      const otherElement = inputElement === 'name' ? 'password' : 'name';\n      const validOtherElement = this.state.controls[otherElement].valid;\n      const validThisElement = updatedControls[inputElement].valid;\n      this.setState({\n        controls: updatedControls,\n        validForm: validThisElement && validOtherElement\n      });\n    };\n\n    this.signinHandler = () => {\n      const username = this.state.controls.name.value;\n      const password = this.state.controls.password.value;\n      this.props.onAuthSubmit(username, password, true);\n    };\n\n    this.signupHandler = () => {\n      const username = this.state.controls.name.value;\n      const password = this.state.controls.password.value;\n      this.props.onAuthSubmit(username, password, false);\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.redirectPath !== '/') {\n      this.props.onAuthRedirect();\n    }\n  }\n\n  render() {\n    const inputs = [];\n\n    for (const key in this.state.controls) {\n      const input = React.createElement(Input, {\n        key: key,\n        elementType: this.state.controls[key].elementType,\n        config: this.state.controls[key].config,\n        value: this.state.controls[key].value,\n        invalid: !this.state.controls[key].valid,\n        shouldValidate: this.state.controls[key].validation,\n        touched: this.state.controls[key].touched,\n        changed: event => this.inputChangeHandler(event, key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n      inputs.push(input);\n    }\n\n    let form = React.createElement(\"div\", {\n      className: \"Auth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, inputs.length > 0 ? inputs : null), React.createElement(Button, {\n      btnType: \"Normal\",\n      disabled: !this.state.validForm,\n      clicked: this.signupHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.validForm,\n      clicked: this.signinHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Sign In\"));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    }\n\n    let error = null;\n\n    if (this.props.error) {\n      error = React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.props.error);\n    }\n\n    let isAuthenticated = null;\n\n    if (this.props.isAuthenticated) {\n      isAuthenticated = React.createElement(Redirect, {\n        to: this.props.redirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, isAuthenticated, form, error);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token,\n    buildingBurger: state.burgerBuilder.building,\n    redirectPath: state.auth.redirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthSubmit: (username, password, isSignIn) => dispatch(actions.auth(username, password, isSignIn)),\n    onAuthRedirect: () => dispatch(actions.authRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Class Based/src/containers/Auth/Auth.js"],"names":["React","Component","Redirect","connect","validateForm","Input","Button","Spinner","Aux","actions","Auth","state","controls","name","elementType","config","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","maxLength","validForm","inputChangeHandler","event","inputElement","rules","updatedControls","target","otherElement","validOtherElement","validThisElement","setState","signinHandler","username","props","onAuthSubmit","signupHandler","componentDidMount","buildingBurger","redirectPath","onAuthRedirect","render","inputs","key","input","push","form","submitHandler","length","loading","error","textAlign","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","isSignIn","authRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { validateForm } from '../../util/util'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport Aux from '../../hoc/Aux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.css'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            name: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Username',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                elementType: 'input',\n                config: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                    maxLength: 15,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        validForm: false,\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.redirectPath !== '/') {\n            this.props.onAuthRedirect()\n        }\n    }\n\n    inputChangeHandler = (event, inputElement) => {\n        const rules = this.state.controls[inputElement].validation\n        const updatedControls = {\n            ...this.state.controls,\n            [inputElement]: {\n                ...this.state.controls[inputElement],\n                value: event.target.value,\n                valid: validateForm(event.target.value, rules),\n                touched: true,\n            },\n        }\n\n        const otherElement = inputElement === 'name' ? 'password' : 'name'\n        const validOtherElement = this.state.controls[otherElement].valid\n        const validThisElement = updatedControls[inputElement].valid\n\n        this.setState({\n            controls: updatedControls,\n            validForm: validThisElement && validOtherElement,\n        })\n    }\n\n    signinHandler = () => {\n        const username = this.state.controls.name.value\n        const password = this.state.controls.password.value\n        this.props.onAuthSubmit(username, password, true)\n    }\n\n    signupHandler = () => {\n        const username = this.state.controls.name.value\n        const password = this.state.controls.password.value\n        this.props.onAuthSubmit(username, password, false)\n    }\n\n    render() {\n        const inputs = []\n\n        for (const key in this.state.controls) {\n            const input = (\n                <Input\n                    key={key}\n                    elementType={this.state.controls[key].elementType}\n                    config={this.state.controls[key].config}\n                    value={this.state.controls[key].value}\n                    invalid={!this.state.controls[key].valid}\n                    shouldValidate={this.state.controls[key].validation}\n                    touched={this.state.controls[key].touched}\n                    changed={(event) => this.inputChangeHandler(event, key)}\n                />\n            )\n            inputs.push(input)\n        }\n\n        let form = (\n            <div className='Auth'>\n                <form onSubmit={this.submitHandler}>{inputs.length > 0 ? inputs : null}</form>\n                <Button\n                    btnType='Normal'\n                    disabled={!this.state.validForm}\n                    clicked={this.signupHandler}\n                >\n                    Sign Up\n                </Button>\n                <Button\n                    btnType='Success'\n                    disabled={!this.state.validForm}\n                    clicked={this.signinHandler}\n                >\n                    Sign In\n                </Button>\n            </div>\n        )\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let error = null\n\n        if (this.props.error) {\n            error = <p style={{ textAlign: 'center' }}>{this.props.error}</p>\n        }\n\n        let isAuthenticated = null\n\n        if (this.props.isAuthenticated) {\n            isAuthenticated = <Redirect to={this.props.redirectPath} />\n        }\n\n        return (\n            <Aux>\n                {isAuthenticated}\n                {form}\n                {error}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token,\n        buildingBurger: state.burgerBuilder.building,\n        redirectPath: state.auth.redirectPath,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuthSubmit: (username, password, isSignIn) =>\n            dispatch(actions.auth(username, password, isSignIn)),\n        onAuthRedirect: () => dispatch(actions.authRedirectPath('/')),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n"]},"metadata":{},"sourceType":"module"}