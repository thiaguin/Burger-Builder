{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler';\nimport * as actionTypes from '../../store/actions';\nconst INGREDIENTS_PRICE = {\n  salad: 1,\n  cheese: 1,\n  bacon: 1.5,\n  meat: 2\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: null,\n      price: 4,\n      purchasable: false,\n      purchasing: false,\n      loading: false,\n      error: false\n    };\n\n    this.updatePurchasable = ingredients => {\n      const sum = Object.values(ingredients).reduce((sum, el) => sum += el, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.addIngredientHandler = type => {\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] += 1;\n      const updatedPrice = this.state.price + INGREDIENTS_PRICE[type];\n      this.setState({\n        price: updatedPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchasable(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const updatedIngredients = { ...this.state.ingredients\n      };\n\n      if (updatedIngredients[type] > 0) {\n        updatedIngredients[type] -= 1;\n        const updatedPrice = this.state.price - INGREDIENTS_PRICE[type];\n        this.setState({\n          price: updatedPrice,\n          ingredients: updatedIngredients\n        });\n      }\n\n      this.updatePurchasable(updatedIngredients);\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      const queryParams = [];\n\n      for (const ingredient in this.state.ingredients) {\n        const param = encodeURIComponent(ingredient) + '=' + encodeURIComponent(this.state.ingredients[ingredient]);\n        queryParams.push(param);\n      }\n\n      queryParams.push('price=' + this.state.price);\n      this.props.history.push({\n        pathname: '/checkout',\n        search: `?${queryParams.join('&')}`\n      });\n    };\n  }\n\n  render() {\n    const disableInfo = {};\n    let orderSummary = null;\n    let burger = this.state.error ? React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Ingredients can't be loaded!\") : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n\n    if (this.state.loading) {\n      orderSummary = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      });\n    }\n\n    if (this.state.ingredients) {\n      for (const ingredient of Object.keys(this.state.ingredients)) {\n        disableInfo[ingredient] = this.state.ingredients[ingredient] <= 0;\n      }\n\n      burger = React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Burger, {\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(BuildControls, {\n        addIngredients: this.addIngredientHandler,\n        removeIngredients: this.removeIngredientHandler,\n        disabled: disableInfo,\n        price: this.state.price,\n        ordered: this.purchaseHandler,\n        purchasable: this.state.purchasable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n      orderSummary = React.createElement(OrderSummary, {\n        price: this.state.price,\n        cancelingPurchase: this.purchaseCancelHandler,\n        continuingPurchase: this.purchaseContinueHandler,\n        ingredients: this.state.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.purchasing,\n      closing: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, orderSummary), burger);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingrediens: state.ingredients\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientsAdded: name => dispatch({\n      type: actionTypes.ADD_INGREDIENT,\n      ingredientName: name\n    }),\n    onIngredientsAdded: name => dispatch({\n      type: actionTypes.ADD_INGREDIENT,\n      ingredientName: name\n    })\n  };\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","connect","Aux","Burger","BuildControls","Modal","Spinner","OrderSummary","axios","withErrorHandler","actionTypes","INGREDIENTS_PRICE","salad","cheese","bacon","meat","BurgerBuilder","state","ingredients","price","purchasable","purchasing","loading","error","updatePurchasable","sum","Object","values","reduce","el","setState","addIngredientHandler","type","updatedIngredients","updatedPrice","removeIngredientHandler","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","queryParams","ingredient","param","encodeURIComponent","push","props","history","pathname","search","join","render","disableInfo","orderSummary","burger","textAlign","keys","mapStateToProps","ingrediens","mapDispatchToProps","dispatch","onIngredientsAdded","name","ADD_INGREDIENT","ingredientName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Aux from '../../hoc/Aux'\nimport Burger from '../../components/Burger/Burger'\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls'\nimport Modal from '../../components/UI/Modal/Modal'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary'\nimport axios from '../../axios-orders'\nimport withErrorHandler from '../../hoc/withErrorHandler'\nimport * as actionTypes from '../../store/actions'\n\nconst INGREDIENTS_PRICE = {\n    salad: 1,\n    cheese: 1,\n    bacon: 1.5,\n    meat: 2,\n}\n\nclass BurgerBuilder extends Component {\n    state = {\n        ingredients: null,\n        price: 4,\n        purchasable: false,\n        purchasing: false,\n        loading: false,\n        error: false,\n    }\n\n    // componentDidMount () {\n    //     axios.get('ingredients.json')\n    //         .then((response) => {\n    //             this.setState({ingredients: response.data})\n    //         })\n    //         .catch((error) => {\n    //             this.setState({error: true})\n    //         })\n    // }\n\n    updatePurchasable = (ingredients) => {\n        const sum = Object.values(ingredients).reduce((sum, el) => (sum += el), 0)\n\n        this.setState({ purchasable: sum > 0 })\n    }\n\n    addIngredientHandler = (type) => {\n        const updatedIngredients = { ...this.state.ingredients }\n        updatedIngredients[type] += 1\n\n        const updatedPrice = this.state.price + INGREDIENTS_PRICE[type]\n\n        this.setState({ price: updatedPrice, ingredients: updatedIngredients })\n        this.updatePurchasable(updatedIngredients)\n    }\n\n    removeIngredientHandler = (type) => {\n        const updatedIngredients = { ...this.state.ingredients }\n\n        if (updatedIngredients[type] > 0) {\n            updatedIngredients[type] -= 1\n\n            const updatedPrice = this.state.price - INGREDIENTS_PRICE[type]\n            this.setState({ price: updatedPrice, ingredients: updatedIngredients })\n        }\n        this.updatePurchasable(updatedIngredients)\n    }\n\n    purchaseHandler = () => {\n        this.setState({ purchasing: true })\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({ purchasing: false })\n    }\n\n    purchaseContinueHandler = () => {\n        const queryParams = []\n        for (const ingredient in this.state.ingredients) {\n            const param =\n                encodeURIComponent(ingredient) +\n                '=' +\n                encodeURIComponent(this.state.ingredients[ingredient])\n            queryParams.push(param)\n        }\n        queryParams.push('price=' + this.state.price)\n        this.props.history.push({\n            pathname: '/checkout',\n            search: `?${queryParams.join('&')}`,\n        })\n    }\n\n    render() {\n        const disableInfo = {}\n        let orderSummary = null\n        let burger = this.state.error ? (\n            <p style={{ textAlign: 'center' }}>Ingredients can't be loaded!</p>\n        ) : (\n            <Spinner />\n        )\n\n        if (this.state.loading) {\n            orderSummary = <Spinner />\n        }\n\n        if (this.state.ingredients) {\n            for (const ingredient of Object.keys(this.state.ingredients)) {\n                disableInfo[ingredient] = this.state.ingredients[ingredient] <= 0\n            }\n            burger = (\n                <Aux>\n                    <Burger ingredients={this.state.ingredients} />\n                    <BuildControls\n                        addIngredients={this.addIngredientHandler}\n                        removeIngredients={this.removeIngredientHandler}\n                        disabled={disableInfo}\n                        price={this.state.price}\n                        ordered={this.purchaseHandler}\n                        purchasable={this.state.purchasable}\n                    />\n                </Aux>\n            )\n\n            orderSummary = (\n                <OrderSummary\n                    price={this.state.price}\n                    cancelingPurchase={this.purchaseCancelHandler}\n                    continuingPurchase={this.purchaseContinueHandler}\n                    ingredients={this.state.ingredients}\n                />\n            )\n        }\n\n        return (\n            <Aux>\n                <Modal show={this.state.purchasing} closing={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingrediens: state.ingredients,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onIngredientsAdded: (name) =>\n            dispatch({ type: actionTypes.ADD_INGREDIENT, ingredientName: name }),\n        onIngredientsAdded: (name) =>\n            dispatch({ type: actionTypes.ADD_INGREDIENT, ingredientName: name }),\n    }\n}\n\nexport default connect(mapStateToProps)(withErrorHandler(BurgerBuilder, axios))\n"]},"metadata":{},"sourceType":"module"}