{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Class Based/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { validateForm } from '../../../util/util';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../../hoc/withErrorHandler';\nimport axios from '../../../axios-orders';\nimport * as actions from '../../../store/actions/index';\nimport './ContactData.css';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        postalCode: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Postal Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            maxLength: 8,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        delivery: {\n          elementType: 'select',\n          config: {\n            options: [{\n              value: 'fastest',\n              displayName: 'Fastest'\n            }, {\n              value: 'cheapset',\n              displayName: 'Cheapest'\n            }]\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      loading: false,\n      validFormData: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (const key in this.state.orderForm) {\n        formData[key] = this.state.orderForm[key].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onBurgerPurchase(order, this.props.token);\n    };\n\n    this.inputChangeHandler = (event, inputElement) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const rules = updatedOrderForm[inputElement].validation;\n      const {\n        value\n      } = event.target;\n      let validForm = true;\n      updatedOrderForm[inputElement].value = value;\n      updatedOrderForm[inputElement].valid = validateForm(value, rules);\n      updatedOrderForm[inputElement].touched = true;\n\n      for (const key in updatedOrderForm) {\n        const value = updatedOrderForm[key];\n        validForm = validForm && value.valid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        validFormData: validForm\n      });\n    };\n  }\n\n  render() {\n    const inputs = [];\n\n    for (const key in this.state.orderForm) {\n      const input = React.createElement(Input, {\n        key: key,\n        elementType: this.state.orderForm[key].elementType,\n        config: this.state.orderForm[key].config,\n        value: this.state.orderForm[key].value,\n        invalid: !this.state.orderForm[key].valid,\n        shouldValidate: this.state.orderForm[key].validation,\n        touched: this.state.orderForm[key].touched,\n        changed: event => this.inputChangeHandler(event, key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n      inputs.push(input);\n    }\n\n    let form = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, inputs.length > 0 ? inputs : null, React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.validFormData,\n      clicked: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Order\"));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ContactData\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Please enter with your datas!\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.price,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onBurgerPurchase: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Class Based/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","validateForm","Button","Input","Spinner","withErrorHandler","axios","actions","ContactData","state","orderForm","name","elementType","config","type","placeholder","value","validation","required","valid","touched","email","street","postalCode","maxLength","minLength","country","delivery","options","displayName","loading","validFormData","orderHandler","event","preventDefault","formData","key","order","ingredients","props","price","orderData","userId","onBurgerPurchase","token","inputChangeHandler","inputElement","updatedOrderForm","rules","target","validForm","setState","render","inputs","input","push","form","length","mapStateToProps","burgerBuilder","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { validateForm } from '../../../util/util'\nimport Button from '../../../components/UI/Button/Button'\nimport Input from '../../../components/UI/Input/Input'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport withErrorHandler from '../../../hoc/withErrorHandler'\nimport axios from '../../../axios-orders'\nimport * as actions from '../../../store/actions/index'\nimport './ContactData.css'\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Your Email',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            postalCode: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Postal Code',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    maxLength: 8,\n                    minLength: 8,\n                },\n                valid: false,\n                touched: false,\n            },\n            country: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Country',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            delivery: {\n                elementType: 'select',\n                config: {\n                    options: [\n                        { value: 'fastest', displayName: 'Fastest' },\n                        { value: 'cheapset', displayName: 'Cheapest' },\n                    ],\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        loading: false,\n        validFormData: false,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault()\n        const formData = {}\n        for (const key in this.state.orderForm) {\n            formData[key] = this.state.orderForm[key].value\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId,\n        }\n\n        this.props.onBurgerPurchase(order, this.props.token)\n    }\n\n    inputChangeHandler = (event, inputElement) => {\n        const updatedOrderForm = { ...this.state.orderForm }\n        const rules = updatedOrderForm[inputElement].validation\n        const { value } = event.target\n        let validForm = true\n\n        updatedOrderForm[inputElement].value = value\n        updatedOrderForm[inputElement].valid = validateForm(value, rules)\n        updatedOrderForm[inputElement].touched = true\n\n        for (const key in updatedOrderForm) {\n            const value = updatedOrderForm[key]\n            validForm = validForm && value.valid\n        }\n\n        this.setState({ orderForm: updatedOrderForm, validFormData: validForm })\n    }\n\n    render() {\n        const inputs = []\n\n        for (const key in this.state.orderForm) {\n            const input = (\n                <Input\n                    key={key}\n                    elementType={this.state.orderForm[key].elementType}\n                    config={this.state.orderForm[key].config}\n                    value={this.state.orderForm[key].value}\n                    invalid={!this.state.orderForm[key].valid}\n                    shouldValidate={this.state.orderForm[key].validation}\n                    touched={this.state.orderForm[key].touched}\n                    changed={(event) => this.inputChangeHandler(event, key)}\n                />\n            )\n            inputs.push(input)\n        }\n\n        let form = (\n            <form>\n                {inputs.length > 0 ? inputs : null}\n                <Button\n                    btnType='Success'\n                    disabled={!this.state.validFormData}\n                    clicked={this.orderHandler}\n                >\n                    Order\n                </Button>\n            </form>\n        )\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        return (\n            <div className='ContactData'>\n                <h4>Please enter with your datas!</h4>\n                {form}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.price,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onBurgerPurchase: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))\n"]},"metadata":{},"sourceType":"module"}