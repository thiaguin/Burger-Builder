{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        name: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Username'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          config: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangeHandler = (event, inputElement) => {\n      const updatedOrderForm = { ...this.state.controls\n      };\n      const rules = updatedOrderForm[inputElement].validation;\n      const {\n        value\n      } = event.target;\n      let validForm = true;\n      updatedOrderForm[inputElement].value = value;\n      updatedOrderForm[inputElement].valid = this.checkValid(value, rules);\n      updatedOrderForm[inputElement].touched = true;\n\n      for (const key in updatedOrderForm) {\n        const value = updatedOrderForm[key];\n        validForm = validForm && value.valid;\n      }\n\n      this.setState({\n        controls: updatedOrderForm,\n        validFormData: validForm\n      });\n    };\n\n    this.checkValid = (value, rules) => {\n      let valid = true;\n      let changed = false;\n\n      if (rules) {\n        if (rules.required) {\n          valid = value.trim() !== '' && valid;\n          changed = true;\n        }\n\n        if (rules.minLength) {\n          valid = value.length <= rules.minLength && valid;\n          changed = true;\n        }\n\n        if (rules.maxLength) {\n          valid = value.length >= rules.maxLength && valid;\n          changed = true;\n        }\n      }\n\n      return changed ? valid : false;\n    };\n  }\n\n  render() {\n    const inputs = [];\n\n    for (const key in this.state.controls) {\n      const input = React.createElement(Input, {\n        key: key,\n        elementType: this.state.controls[key].elementType,\n        config: this.state.controls[key].config,\n        value: this.state.controls[key].value,\n        invalid: !this.state.controls[key].valid,\n        shouldValidate: this.state.controls[key].validation,\n        touched: this.state.controls[key].touched,\n        changed: event => this.inputChangeHandler(event, key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      });\n      inputs.push(input);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, inputs.length > 0 ? inputs : null, React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.validFormData,\n      clicked: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","Auth","state","controls","name","elementType","config","type","placeholder","value","validation","required","valid","touched","password","minLength","inputChangeHandler","event","inputElement","updatedOrderForm","rules","target","validForm","checkValid","key","setState","validFormData","changed","trim","length","maxLength","render","inputs","input","push","orderHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            name: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Username',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                elementType: 'input',\n                config: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n    }\n\n    inputChangeHandler = (event, inputElement) => {\n        const updatedOrderForm = { ...this.state.controls }\n        const rules = updatedOrderForm[inputElement].validation\n        const { value } = event.target\n        let validForm = true\n\n        updatedOrderForm[inputElement].value = value\n        updatedOrderForm[inputElement].valid = this.checkValid(value, rules)\n        updatedOrderForm[inputElement].touched = true\n\n        for (const key in updatedOrderForm) {\n            const value = updatedOrderForm[key]\n            validForm = validForm && value.valid\n        }\n\n        this.setState({ controls: updatedOrderForm, validFormData: validForm })\n    }\n\n    checkValid = (value, rules) => {\n        let valid = true\n        let changed = false\n\n        if (rules) {\n            if (rules.required) {\n                valid = value.trim() !== '' && valid\n                changed = true\n            }\n            if (rules.minLength) {\n                valid = value.length <= rules.minLength && valid\n                changed = true\n            }\n            if (rules.maxLength) {\n                valid = value.length >= rules.maxLength && valid\n                changed = true\n            }\n        }\n\n        return changed ? valid : false\n    }\n\n    render() {\n        const inputs = []\n\n        for (const key in this.state.controls) {\n            const input = (\n                <Input\n                    key={key}\n                    elementType={this.state.controls[key].elementType}\n                    config={this.state.controls[key].config}\n                    value={this.state.controls[key].value}\n                    invalid={!this.state.controls[key].valid}\n                    shouldValidate={this.state.controls[key].validation}\n                    touched={this.state.controls[key].touched}\n                    changed={(event) => this.inputChangeHandler(event, key)}\n                />\n            )\n            inputs.push(input)\n        }\n\n        return (\n            <div>\n                <form>\n                    {inputs.length > 0 ? inputs : null}\n                    <Button\n                        btnType='Success'\n                        disabled={!this.state.validFormData}\n                        clicked={this.orderHandler}\n                    >\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Auth\n"]},"metadata":{},"sourceType":"module"}