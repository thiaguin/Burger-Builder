{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { validateForm } from '../../util/util';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Aux from '../../hoc/Aux';\nimport * as actions from '../../store/actions/index';\nimport './Auth.css';\n\nconst Auth = props => {\n  const controls = {\n    name: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Username'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      config: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6,\n        maxLength: 15\n      },\n      valid: false,\n      touched: false\n    }\n  }; // state = {\n  //     controls: {\n  //         name: {\n  //             elementType: 'input',\n  //             config: {\n  //                 type: 'text',\n  //                 placeholder: 'Username',\n  //             },\n  //             value: '',\n  //             validation: {\n  //                 required: true,\n  //                 isEmail: true,\n  //             },\n  //             valid: false,\n  //             touched: false,\n  //         },\n  //         password: {\n  //             elementType: 'input',\n  //             config: {\n  //                 type: 'password',\n  //                 placeholder: 'Password',\n  //             },\n  //             value: '',\n  //             validation: {\n  //                 required: true,\n  //                 minLength: 6,\n  //                 maxLength: 15,\n  //             },\n  //             valid: false,\n  //             touched: false,\n  //         },\n  //     },\n  //     validForm: false,\n  // }\n  // componentDidMount() {\n  //     if (!this.props.buildingBurger && this.props.redirectPath !== '/') {\n  //         this.props.onAuthRedirect()\n  //     }\n  // }\n\n  const inputChangeHandler = (event, inputElement) => {\n    const rules = this.state.controls[inputElement].validation;\n    const updatedControls = { ...this.state.controls,\n      [inputElement]: { ...this.state.controls[inputElement],\n        value: event.target.value,\n        valid: validateForm(event.target.value, rules),\n        touched: true\n      }\n    };\n    const otherElement = inputElement === 'name' ? 'password' : 'name';\n    const validOtherElement = this.state.controls[otherElement].valid;\n    const validThisElement = updatedControls[inputElement].valid;\n    this.setState({\n      controls: updatedControls,\n      validForm: validThisElement && validOtherElement\n    });\n  };\n\n  const signinHandler = () => {\n    const username = this.state.controls.name.value;\n    const password = this.state.controls.password.value;\n    this.props.onAuthSubmit(username, password, true);\n  };\n\n  const signupHandler = () => {\n    const username = this.state.controls.name.value;\n    const password = this.state.controls.password.value;\n    this.props.onAuthSubmit(username, password, false);\n  };\n\n  const inputs = [];\n\n  for (const key in this.state.controls) {\n    const input = React.createElement(Input, {\n      key: key,\n      elementType: this.state.controls[key].elementType,\n      config: this.state.controls[key].config,\n      value: this.state.controls[key].value,\n      invalid: !this.state.controls[key].valid,\n      shouldValidate: this.state.controls[key].validation,\n      touched: this.state.controls[key].touched,\n      changed: event => this.inputChangeHandler(event, key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    });\n    inputs.push(input);\n  }\n\n  let form = React.createElement(\"div\", {\n    className: \"Auth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: this.submitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, inputs.length > 0 ? inputs : null), React.createElement(Button, {\n    btnType: \"Normal\",\n    disabled: !this.state.validForm,\n    clicked: this.signupHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Sign Up\"), React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !this.state.validForm,\n    clicked: this.signinHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Sign In\"));\n\n  if (this.props.loading) {\n    form = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    });\n  }\n\n  let error = null;\n\n  if (this.props.error) {\n    error = React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.props.error);\n  }\n\n  let isAuthenticated = null;\n\n  if (this.props.isAuthenticated) {\n    isAuthenticated = React.createElement(Redirect, {\n      to: this.props.redirectPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Aux, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, isAuthenticated, form, error);\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token,\n    buildingBurger: state.burgerBuilder.building,\n    redirectPath: state.auth.redirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthSubmit: (username, password, isSignIn) => dispatch(actions.auth(username, password, isSignIn)),\n    onAuthRedirect: () => dispatch(actions.authRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Auth/Auth.js"],"names":["React","Component","Redirect","connect","validateForm","Input","Button","Spinner","Aux","actions","Auth","props","controls","name","elementType","config","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","maxLength","inputChangeHandler","event","inputElement","rules","state","updatedControls","target","otherElement","validOtherElement","validThisElement","setState","validForm","signinHandler","username","onAuthSubmit","signupHandler","inputs","key","input","push","form","submitHandler","length","loading","error","textAlign","isAuthenticated","redirectPath","mapStateToProps","auth","token","buildingBurger","burgerBuilder","building","mapDispatchToProps","dispatch","isSignIn","onAuthRedirect","authRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { validateForm } from '../../util/util'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport Aux from '../../hoc/Aux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.css'\n\nconst Auth = (props) => {\n    const controls = {\n        name: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Username',\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        password: {\n            elementType: 'input',\n            config: {\n                type: 'password',\n                placeholder: 'Password',\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6,\n                maxLength: 15,\n            },\n            valid: false,\n            touched: false,\n        },\n    }\n    // state = {\n    //     controls: {\n    //         name: {\n    //             elementType: 'input',\n    //             config: {\n    //                 type: 'text',\n    //                 placeholder: 'Username',\n    //             },\n    //             value: '',\n    //             validation: {\n    //                 required: true,\n    //                 isEmail: true,\n    //             },\n    //             valid: false,\n    //             touched: false,\n    //         },\n    //         password: {\n    //             elementType: 'input',\n    //             config: {\n    //                 type: 'password',\n    //                 placeholder: 'Password',\n    //             },\n    //             value: '',\n    //             validation: {\n    //                 required: true,\n    //                 minLength: 6,\n    //                 maxLength: 15,\n    //             },\n    //             valid: false,\n    //             touched: false,\n    //         },\n    //     },\n    //     validForm: false,\n    // }\n\n    // componentDidMount() {\n    //     if (!this.props.buildingBurger && this.props.redirectPath !== '/') {\n    //         this.props.onAuthRedirect()\n    //     }\n    // }\n\n    const inputChangeHandler = (event, inputElement) => {\n        const rules = this.state.controls[inputElement].validation\n        const updatedControls = {\n            ...this.state.controls,\n            [inputElement]: {\n                ...this.state.controls[inputElement],\n                value: event.target.value,\n                valid: validateForm(event.target.value, rules),\n                touched: true,\n            },\n        }\n\n        const otherElement = inputElement === 'name' ? 'password' : 'name'\n        const validOtherElement = this.state.controls[otherElement].valid\n        const validThisElement = updatedControls[inputElement].valid\n\n        this.setState({\n            controls: updatedControls,\n            validForm: validThisElement && validOtherElement,\n        })\n    }\n\n    const signinHandler = () => {\n        const username = this.state.controls.name.value\n        const password = this.state.controls.password.value\n        this.props.onAuthSubmit(username, password, true)\n    }\n\n    const signupHandler = () => {\n        const username = this.state.controls.name.value\n        const password = this.state.controls.password.value\n        this.props.onAuthSubmit(username, password, false)\n    }\n\n    const inputs = []\n\n    for (const key in this.state.controls) {\n        const input = (\n            <Input\n                key={key}\n                elementType={this.state.controls[key].elementType}\n                config={this.state.controls[key].config}\n                value={this.state.controls[key].value}\n                invalid={!this.state.controls[key].valid}\n                shouldValidate={this.state.controls[key].validation}\n                touched={this.state.controls[key].touched}\n                changed={(event) => this.inputChangeHandler(event, key)}\n            />\n        )\n        inputs.push(input)\n    }\n\n    let form = (\n        <div className='Auth'>\n            <form onSubmit={this.submitHandler}>{inputs.length > 0 ? inputs : null}</form>\n            <Button btnType='Normal' disabled={!this.state.validForm} clicked={this.signupHandler}>\n                Sign Up\n            </Button>\n            <Button btnType='Success' disabled={!this.state.validForm} clicked={this.signinHandler}>\n                Sign In\n            </Button>\n        </div>\n    )\n\n    if (this.props.loading) {\n        form = <Spinner />\n    }\n\n    let error = null\n\n    if (this.props.error) {\n        error = <p style={{ textAlign: 'center' }}>{this.props.error}</p>\n    }\n\n    let isAuthenticated = null\n\n    if (this.props.isAuthenticated) {\n        isAuthenticated = <Redirect to={this.props.redirectPath} />\n    }\n\n    return (\n        <Aux>\n            {isAuthenticated}\n            {form}\n            {error}\n        </Aux>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token,\n        buildingBurger: state.burgerBuilder.building,\n        redirectPath: state.auth.redirectPath,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuthSubmit: (username, password, isSignIn) =>\n            dispatch(actions.auth(username, password, isSignIn)),\n        onAuthRedirect: () => dispatch(actions.authRedirectPath('/')),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n"]},"metadata":{},"sourceType":"module"}