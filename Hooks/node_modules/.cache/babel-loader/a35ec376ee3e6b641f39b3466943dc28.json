{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as actions from '../../store/actions/index';\nimport './Auth.css';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        name: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Username'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          config: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 15\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      validForm: false\n    };\n\n    this.inputChangeHandler = (event, inputElement) => {\n      const rules = this.state.controls[inputElement].validation;\n      const updatedControls = { ...this.state.controls,\n        [inputElement]: { ...this.state.controls[inputElement],\n          value: event.target.value,\n          valid: this.checkValid(event.target.value, rules),\n          touched: true\n        }\n      };\n      const validPassword = this.state.controls.password.valid;\n      const validUsername = this.state.controls.name.valid;\n      this.setState({\n        controls: updatedControls,\n        validForm: validPassword && validUsername\n      });\n    };\n\n    this.checkValid = (value, rules) => {\n      let valid = true;\n      let changed = false;\n\n      if (rules) {\n        if (rules.required) {\n          valid = value.trim() !== '' && valid;\n          changed = true;\n        }\n\n        if (rules.minLength) {\n          valid = value.length >= rules.minLength && valid;\n          changed = true;\n        }\n\n        if (rules.maxLength) {\n          valid = value.length <= rules.maxLength && valid;\n          changed = true;\n        }\n      }\n\n      return changed ? valid : false;\n    };\n\n    this.submitHandler = () => {\n      const username = this.state.controls.name.value;\n      const password = this.state.controls.password.value;\n      this.props.onAuthSubmit(username, password);\n    };\n  }\n\n  render() {\n    const inputs = [];\n\n    for (const key in this.state.controls) {\n      const input = React.createElement(Input, {\n        key: key,\n        elementType: this.state.controls[key].elementType,\n        config: this.state.controls[key].config,\n        value: this.state.controls[key].value,\n        invalid: !this.state.controls[key].valid,\n        shouldValidate: this.state.controls[key].validation,\n        touched: this.state.controls[key].touched,\n        changed: event => this.inputChangeHandler(event, key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n      inputs.push(input);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"Auth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, inputs.length > 0 ? inputs : null, React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.validForm,\n      clicked: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthSubmit: (username, password) => dispatch(actions.auth(username, password))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Input","Button","actions","Auth","state","controls","name","elementType","config","type","placeholder","value","validation","required","valid","touched","password","minLength","maxLength","validForm","inputChangeHandler","event","inputElement","rules","updatedControls","target","checkValid","validPassword","validUsername","setState","changed","trim","length","submitHandler","username","props","onAuthSubmit","render","inputs","key","input","push","orderHandler","mapDispatchToProps","dispatch","auth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBM,KADyB,GACjB;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,IAAI,EAAE;AACFC,UAAAA,WAAW,EAAE,OADX;AAEFC,UAAAA,MAAM,EAAE;AACJC,YAAAA,IAAI,EAAE,MADF;AAEJC,YAAAA,WAAW,EAAE;AAFT,WAFN;AAMFC,UAAAA,KAAK,EAAE,EANL;AAOFC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE;AADF,WAPV;AAUFC,UAAAA,KAAK,EAAE,KAVL;AAWFC,UAAAA,OAAO,EAAE;AAXP,SADA;AAcNC,QAAAA,QAAQ,EAAE;AACNT,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,MAAM,EAAE;AACJC,YAAAA,IAAI,EAAE,UADF;AAEJC,YAAAA,WAAW,EAAE;AAFT,WAFF;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERI,YAAAA,SAAS,EAAE,CAFH;AAGRC,YAAAA,SAAS,EAAE;AAHH,WAPN;AAYNJ,UAAAA,KAAK,EAAE,KAZD;AAaNC,UAAAA,OAAO,EAAE;AAbH;AAdJ,OADN;AA+BJI,MAAAA,SAAS,EAAE;AA/BP,KADiB;;AAAA,SAmCzBC,kBAnCyB,GAmCJ,CAACC,KAAD,EAAQC,YAAR,KAAyB;AAC1C,YAAMC,KAAK,GAAG,KAAKnB,KAAL,CAAWC,QAAX,CAAoBiB,YAApB,EAAkCV,UAAhD;AACA,YAAMY,eAAe,GAAG,EACpB,GAAG,KAAKpB,KAAL,CAAWC,QADM;AAEpB,SAACiB,YAAD,GAAgB,EACZ,GAAG,KAAKlB,KAAL,CAAWC,QAAX,CAAoBiB,YAApB,CADS;AAEZX,UAAAA,KAAK,EAAEU,KAAK,CAACI,MAAN,CAAad,KAFR;AAGZG,UAAAA,KAAK,EAAE,KAAKY,UAAL,CAAgBL,KAAK,CAACI,MAAN,CAAad,KAA7B,EAAoCY,KAApC,CAHK;AAIZR,UAAAA,OAAO,EAAE;AAJG;AAFI,OAAxB;AAUA,YAAMY,aAAa,GAAG,KAAKvB,KAAL,CAAWC,QAAX,CAAoBW,QAApB,CAA6BF,KAAnD;AACA,YAAMc,aAAa,GAAG,KAAKxB,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CAAyBQ,KAA/C;AACA,WAAKe,QAAL,CAAc;AAAExB,QAAAA,QAAQ,EAAEmB,eAAZ;AAA6BL,QAAAA,SAAS,EAAEQ,aAAa,IAAIC;AAAzD,OAAd;AACH,KAlDwB;;AAAA,SAoDzBF,UApDyB,GAoDZ,CAACf,KAAD,EAAQY,KAAR,KAAkB;AAC3B,UAAIT,KAAK,GAAG,IAAZ;AACA,UAAIgB,OAAO,GAAG,KAAd;;AAEA,UAAIP,KAAJ,EAAW;AACP,YAAIA,KAAK,CAACV,QAAV,EAAoB;AAChBC,UAAAA,KAAK,GAAGH,KAAK,CAACoB,IAAN,OAAiB,EAAjB,IAAuBjB,KAA/B;AACAgB,UAAAA,OAAO,GAAG,IAAV;AACH;;AACD,YAAIP,KAAK,CAACN,SAAV,EAAqB;AACjBH,UAAAA,KAAK,GAAGH,KAAK,CAACqB,MAAN,IAAgBT,KAAK,CAACN,SAAtB,IAAmCH,KAA3C;AACAgB,UAAAA,OAAO,GAAG,IAAV;AACH;;AACD,YAAIP,KAAK,CAACL,SAAV,EAAqB;AACjBJ,UAAAA,KAAK,GAAGH,KAAK,CAACqB,MAAN,IAAgBT,KAAK,CAACL,SAAtB,IAAmCJ,KAA3C;AACAgB,UAAAA,OAAO,GAAG,IAAV;AACH;AACJ;;AAED,aAAOA,OAAO,GAAGhB,KAAH,GAAW,KAAzB;AACH,KAxEwB;;AAAA,SA0EzBmB,aA1EyB,GA0ET,MAAM;AAClB,YAAMC,QAAQ,GAAG,KAAK9B,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CAAyBK,KAA1C;AACA,YAAMK,QAAQ,GAAG,KAAKZ,KAAL,CAAWC,QAAX,CAAoBW,QAApB,CAA6BL,KAA9C;AACA,WAAKwB,KAAL,CAAWC,YAAX,CAAwBF,QAAxB,EAAkClB,QAAlC;AACH,KA9EwB;AAAA;;AAgFzBqB,EAAAA,MAAM,GAAG;AACL,UAAMC,MAAM,GAAG,EAAf;;AAEA,SAAK,MAAMC,GAAX,IAAkB,KAAKnC,KAAL,CAAWC,QAA7B,EAAuC;AACnC,YAAMmC,KAAK,GACP,oBAAC,KAAD;AACI,QAAA,GAAG,EAAED,GADT;AAEI,QAAA,WAAW,EAAE,KAAKnC,KAAL,CAAWC,QAAX,CAAoBkC,GAApB,EAAyBhC,WAF1C;AAGI,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWC,QAAX,CAAoBkC,GAApB,EAAyB/B,MAHrC;AAII,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWC,QAAX,CAAoBkC,GAApB,EAAyB5B,KAJpC;AAKI,QAAA,OAAO,EAAE,CAAC,KAAKP,KAAL,CAAWC,QAAX,CAAoBkC,GAApB,EAAyBzB,KALvC;AAMI,QAAA,cAAc,EAAE,KAAKV,KAAL,CAAWC,QAAX,CAAoBkC,GAApB,EAAyB3B,UAN7C;AAOI,QAAA,OAAO,EAAE,KAAKR,KAAL,CAAWC,QAAX,CAAoBkC,GAApB,EAAyBxB,OAPtC;AAQI,QAAA,OAAO,EAAGM,KAAD,IAAW,KAAKD,kBAAL,CAAwBC,KAAxB,EAA+BkB,GAA/B,CARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAYAD,MAAAA,MAAM,CAACG,IAAP,CAAYD,KAAZ;AACH;;AAED,WACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,MAAM,CAACN,MAAP,GAAgB,CAAhB,GAAoBM,MAApB,GAA6B,IADlC,EAEI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAC,SADZ;AAEI,MAAA,QAAQ,EAAE,CAAC,KAAKlC,KAAL,CAAWe,SAF1B;AAGI,MAAA,OAAO,EAAE,KAAKuB,YAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CADJ,CADJ;AAcH;;AAjHwB;;AAoH7B,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHR,IAAAA,YAAY,EAAE,CAACF,QAAD,EAAWlB,QAAX,KAAwB4B,QAAQ,CAAC1C,OAAO,CAAC2C,IAAR,CAAaX,QAAb,EAAuBlB,QAAvB,CAAD;AAD3C,GAAP;AAGH,CAJD;;AAMA,eAAejB,OAAO,CAAC,IAAD,EAAO4C,kBAAP,CAAP,CAAkCxC,IAAlC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport * as actions from '../../store/actions/index'\nimport './Auth.css'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            name: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Username',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                elementType: 'input',\n                config: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                    maxLength: 15,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        validForm: false,\n    }\n\n    inputChangeHandler = (event, inputElement) => {\n        const rules = this.state.controls[inputElement].validation\n        const updatedControls = {\n            ...this.state.controls,\n            [inputElement]: {\n                ...this.state.controls[inputElement],\n                value: event.target.value,\n                valid: this.checkValid(event.target.value, rules),\n                touched: true,\n            },\n        }\n\n        const validPassword = this.state.controls.password.valid\n        const validUsername = this.state.controls.name.valid\n        this.setState({ controls: updatedControls, validForm: validPassword && validUsername })\n    }\n\n    checkValid = (value, rules) => {\n        let valid = true\n        let changed = false\n\n        if (rules) {\n            if (rules.required) {\n                valid = value.trim() !== '' && valid\n                changed = true\n            }\n            if (rules.minLength) {\n                valid = value.length >= rules.minLength && valid\n                changed = true\n            }\n            if (rules.maxLength) {\n                valid = value.length <= rules.maxLength && valid\n                changed = true\n            }\n        }\n\n        return changed ? valid : false\n    }\n\n    submitHandler = () => {\n        const username = this.state.controls.name.value\n        const password = this.state.controls.password.value\n        this.props.onAuthSubmit(username, password)\n    }\n\n    render() {\n        const inputs = []\n\n        for (const key in this.state.controls) {\n            const input = (\n                <Input\n                    key={key}\n                    elementType={this.state.controls[key].elementType}\n                    config={this.state.controls[key].config}\n                    value={this.state.controls[key].value}\n                    invalid={!this.state.controls[key].valid}\n                    shouldValidate={this.state.controls[key].validation}\n                    touched={this.state.controls[key].touched}\n                    changed={(event) => this.inputChangeHandler(event, key)}\n                />\n            )\n            inputs.push(input)\n        }\n\n        return (\n            <div className='Auth'>\n                <form>\n                    {inputs.length > 0 ? inputs : null}\n                    <Button\n                        btnType='Success'\n                        disabled={!this.state.validForm}\n                        clicked={this.orderHandler}\n                    >\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuthSubmit: (username, password) => dispatch(actions.auth(username, password)),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Auth)\n"]},"metadata":{},"sourceType":"module"}