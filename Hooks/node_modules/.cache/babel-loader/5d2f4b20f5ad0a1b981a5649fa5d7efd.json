{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nconst authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nconst authSuccess = data => {\n  const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000);\n  localStorage.setItem('token', data.idToken);\n  localStorage.setItem('expirationDate', expirationDate);\n  localStorage.setItem('userId', data.localId);\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: data.idToken,\n    userId: data.localId\n  };\n};\n\nconst authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const authLogout = () => {\n  // localStorage.removeItem('token')\n  // localStorage.removeItem('expirationDate')\n  // localStorage.removeItem('userId')\n  return {\n    type: actionTypes.AUTH_INITIATE_LOGOUT\n  };\n};\nexport const authLogoutSucceed = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nconst authLogoutAsync = expiresTime => {\n  return {\n    type: actionTypes.AUTH_LOGOUT_ASYNC,\n    expiresTime: expiresTime\n  }; // return (dispatch) => {\n  // setTimeout(() => dispatch(authLogout()), expiresTime * 1000)\n  // }\n};\n\nexport const auth = (username, password, isSignIn) => {\n  const authData = {\n    email: username,\n    password: password,\n    returnSecureToken: true\n  };\n  const signUpUrl = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY';\n  const signInUrl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY';\n  const url = isSignIn ? signInUrl : signUpUrl;\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(url, authData).then(response => {\n      dispatch(authSuccess(response.data));\n      dispatch(authLogoutAsync(response.data.expiresIn));\n    }).catch(error => {\n      dispatch(authFail(error.response.data.error.message));\n    });\n  };\n};\nexport const authRedirectPath = path => {\n  return {\n    type: actionTypes.AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheck = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n      const dateNow = new Date();\n\n      if (expirationDate > dateNow) {\n        const expiresIn = (expirationDate.getTime() - dateNow.getTime()) / 1000;\n        const data = {\n          localId: localStorage.getItem('userId'),\n          idToken: token,\n          expiresIn: expiresIn\n        };\n        dispatch(authSuccess(data));\n        dispatch(authLogoutAsync(expiresIn));\n      } else {\n        dispatch(authLogout());\n      }\n    } else {\n      dispatch(authLogout());\n    }\n  };\n};","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Saga/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","data","expirationDate","Date","getTime","expiresIn","localStorage","setItem","idToken","localId","AUTH_SUCCESS","token","userId","authFail","error","AUTH_FAIL","authLogout","AUTH_INITIATE_LOGOUT","authLogoutSucceed","AUTH_LOGOUT","authLogoutAsync","expiresTime","AUTH_LOGOUT_ASYNC","auth","username","password","isSignIn","authData","email","returnSecureToken","signUpUrl","signInUrl","url","dispatch","post","then","response","catch","message","authRedirectPath","path","AUTH_REDIRECT_PATH","authCheck","getItem","dateNow"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\nconst authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nconst authSuccess = (data) => {\n    const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000)\n    localStorage.setItem('token', data.idToken)\n    localStorage.setItem('expirationDate', expirationDate)\n    localStorage.setItem('userId', data.localId)\n\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: data.idToken,\n        userId: data.localId,\n    }\n}\n\nconst authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error,\n    }\n}\n\nexport const authLogout = () => {\n    // localStorage.removeItem('token')\n    // localStorage.removeItem('expirationDate')\n    // localStorage.removeItem('userId')\n\n    return {\n        type: actionTypes.AUTH_INITIATE_LOGOUT,\n    }\n}\n\nexport const authLogoutSucceed = () => {\n    return {\n        type: actionTypes.AUTH_LOGOUT,\n    }\n}\n\nconst authLogoutAsync = (expiresTime) => {\n    return {\n        type: actionTypes.AUTH_LOGOUT_ASYNC,\n        expiresTime: expiresTime,\n    }\n    // return (dispatch) => {\n    // setTimeout(() => dispatch(authLogout()), expiresTime * 1000)\n    // }\n}\n\nexport const auth = (username, password, isSignIn) => {\n    const authData = {\n        email: username,\n        password: password,\n        returnSecureToken: true,\n    }\n    const signUpUrl =\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY'\n    const signInUrl =\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY'\n\n    const url = isSignIn ? signInUrl : signUpUrl\n\n    return (dispatch) => {\n        dispatch(authStart())\n        axios\n            .post(url, authData)\n            .then((response) => {\n                dispatch(authSuccess(response.data))\n                dispatch(authLogoutAsync(response.data.expiresIn))\n            })\n            .catch((error) => {\n                dispatch(authFail(error.response.data.error.message))\n            })\n    }\n}\n\nexport const authRedirectPath = (path) => {\n    return {\n        type: actionTypes.AUTH_REDIRECT_PATH,\n        path: path,\n    }\n}\n\nexport const authCheck = () => {\n    return (dispatch) => {\n        const token = localStorage.getItem('token')\n\n        if (token) {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\n            const dateNow = new Date()\n            if (expirationDate > dateNow) {\n                const expiresIn = (expirationDate.getTime() - dateNow.getTime()) / 1000\n                const data = {\n                    localId: localStorage.getItem('userId'),\n                    idToken: token,\n                    expiresIn: expiresIn,\n                }\n                dispatch(authSuccess(data))\n                dispatch(authLogoutAsync(expiresIn))\n            } else {\n                dispatch(authLogout())\n            }\n        } else {\n            dispatch(authLogout())\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}