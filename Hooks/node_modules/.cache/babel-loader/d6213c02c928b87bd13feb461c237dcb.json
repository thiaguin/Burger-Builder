{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userId');\n  yield put(actions.authLogoutSucceed);\n}\nexport function* authLogoutAsyncSaga(action) {\n  yield delay(action.expiresTime * 1000);\n  yield put(actions.authLogout());\n}\nexport function* authSaga(action) {\n  const authData = {\n    email: action.username,\n    password: action.password,\n    returnSecureToken: true\n  };\n  const signUpUrl = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY';\n  const signInUrl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY';\n  const url = isSignIn ? signInUrl : signUpUrl;\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(url, authData).then(response => {\n      dispatch(authSuccess(response.data));\n      dispatch(authLogoutAsync(response.data.expiresIn));\n    }).catch(error => {\n      dispatch(authFail(error.response.data.error.message));\n    });\n  };\n}","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Saga/src/store/sagas/auth.js"],"names":["put","delay","actions","logoutSaga","action","localStorage","removeItem","authLogoutSucceed","authLogoutAsyncSaga","expiresTime","authLogout","authSaga","authData","email","username","password","returnSecureToken","signUpUrl","signInUrl","url","isSignIn","dispatch","authStart","axios","post","then","response","authSuccess","data","authLogoutAsync","expiresIn","catch","error","authFail","message"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAChC,QAAMC,YAAY,CAACC,UAAb,CAAwB,OAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,gBAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,QAAxB,CAAN;AAEA,QAAMN,GAAG,CAACE,OAAO,CAACK,iBAAT,CAAT;AACH;AAED,OAAO,UAAUC,mBAAV,CAA8BJ,MAA9B,EAAsC;AACzC,QAAMH,KAAK,CAACG,MAAM,CAACK,WAAP,GAAqB,IAAtB,CAAX;AACA,QAAMT,GAAG,CAACE,OAAO,CAACQ,UAAR,EAAD,CAAT;AACH;AAED,OAAO,UAAUC,QAAV,CAAmBP,MAAnB,EAA2B;AAC9B,QAAMQ,QAAQ,GAAG;AACbC,IAAAA,KAAK,EAAET,MAAM,CAACU,QADD;AAEbC,IAAAA,QAAQ,EAAEX,MAAM,CAACW,QAFJ;AAGbC,IAAAA,iBAAiB,EAAE;AAHN,GAAjB;AAKA,QAAMC,SAAS,GACX,uGADJ;AAEA,QAAMC,SAAS,GACX,mHADJ;AAGA,QAAMC,GAAG,GAAGC,QAAQ,GAAGF,SAAH,GAAeD,SAAnC;AAEA,SAAQI,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACC,SAAS,EAAV,CAAR;AACAC,IAAAA,KAAK,CACAC,IADL,CACUL,GADV,EACeP,QADf,EAEKa,IAFL,CAEWC,QAAD,IAAc;AAChBL,MAAAA,QAAQ,CAACM,WAAW,CAACD,QAAQ,CAACE,IAAV,CAAZ,CAAR;AACAP,MAAAA,QAAQ,CAACQ,eAAe,CAACH,QAAQ,CAACE,IAAT,CAAcE,SAAf,CAAhB,CAAR;AACH,KALL,EAMKC,KANL,CAMYC,KAAD,IAAW;AACdX,MAAAA,QAAQ,CAACY,QAAQ,CAACD,KAAK,CAACN,QAAN,CAAeE,IAAf,CAAoBI,KAApB,CAA0BE,OAA3B,CAAT,CAAR;AACH,KARL;AASH,GAXD;AAYH","sourcesContent":["import { put, delay } from 'redux-saga/effects'\nimport * as actions from '../actions/index'\n\nexport function* logoutSaga(action) {\n    yield localStorage.removeItem('token')\n    yield localStorage.removeItem('expirationDate')\n    yield localStorage.removeItem('userId')\n\n    yield put(actions.authLogoutSucceed)\n}\n\nexport function* authLogoutAsyncSaga(action) {\n    yield delay(action.expiresTime * 1000)\n    yield put(actions.authLogout())\n}\n\nexport function* authSaga(action) {\n    const authData = {\n        email: action.username,\n        password: action.password,\n        returnSecureToken: true,\n    }\n    const signUpUrl =\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY'\n    const signInUrl =\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY'\n\n    const url = isSignIn ? signInUrl : signUpUrl\n\n    return (dispatch) => {\n        dispatch(authStart())\n        axios\n            .post(url, authData)\n            .then((response) => {\n                dispatch(authSuccess(response.data))\n                dispatch(authLogoutAsync(response.data.expiresIn))\n            })\n            .catch((error) => {\n                dispatch(authFail(error.response.data.error.message))\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}