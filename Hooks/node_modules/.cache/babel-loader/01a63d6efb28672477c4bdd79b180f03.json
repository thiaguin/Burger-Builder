{"ast":null,"code":"export const validateForm = (value, rules) => {\n  let valid = true;\n  let changed = false;\n\n  if (rules) {\n    if (rules.required) {\n      valid = value.trim() !== '' && valid;\n      changed = true;\n    }\n\n    if (rules.minLength) {\n      valid = value.length >= rules.minLength && valid;\n      changed = true;\n    }\n\n    if (rules.maxLength) {\n      valid = value.length <= rules.maxLength && valid;\n      changed = true;\n    }\n\n    if (rules.isEmail) {\n      const emailRegex = /\\S+@\\S+\\.\\S+/;\n      changed = emailRegex.test(value);\n    }\n  }\n\n  return changed ? valid : false;\n};","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Saga/src/util/util.js"],"names":["validateForm","value","rules","valid","changed","required","trim","minLength","length","maxLength","isEmail","emailRegex","test"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC1C,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,OAAO,GAAG,KAAd;;AAEA,MAAIF,KAAJ,EAAW;AACP,QAAIA,KAAK,CAACG,QAAV,EAAoB;AAChBF,MAAAA,KAAK,GAAGF,KAAK,CAACK,IAAN,OAAiB,EAAjB,IAAuBH,KAA/B;AACAC,MAAAA,OAAO,GAAG,IAAV;AACH;;AACD,QAAIF,KAAK,CAACK,SAAV,EAAqB;AACjBJ,MAAAA,KAAK,GAAGF,KAAK,CAACO,MAAN,IAAgBN,KAAK,CAACK,SAAtB,IAAmCJ,KAA3C;AACAC,MAAAA,OAAO,GAAG,IAAV;AACH;;AACD,QAAIF,KAAK,CAACO,SAAV,EAAqB;AACjBN,MAAAA,KAAK,GAAGF,KAAK,CAACO,MAAN,IAAgBN,KAAK,CAACO,SAAtB,IAAmCN,KAA3C;AACAC,MAAAA,OAAO,GAAG,IAAV;AACH;;AAED,QAAIF,KAAK,CAACQ,OAAV,EAAmB;AACf,YAAMC,UAAU,GAAG,cAAnB;AACAP,MAAAA,OAAO,GAAGO,UAAU,CAACC,IAAX,CAAgBX,KAAhB,CAAV;AACH;AACJ;;AAED,SAAOG,OAAO,GAAGD,KAAH,GAAW,KAAzB;AACH,CAzBM","sourcesContent":["export const validateForm = (value, rules) => {\n    let valid = true\n    let changed = false\n\n    if (rules) {\n        if (rules.required) {\n            valid = value.trim() !== '' && valid\n            changed = true\n        }\n        if (rules.minLength) {\n            valid = value.length >= rules.minLength && valid\n            changed = true\n        }\n        if (rules.maxLength) {\n            valid = value.length <= rules.maxLength && valid\n            changed = true\n        }\n\n        if (rules.isEmail) {\n            const emailRegex = /\\S+@\\S+\\.\\S+/\n            changed = emailRegex.test(value)\n        }\n    }\n\n    return changed ? valid : false\n}\n"]},"metadata":{},"sourceType":"module"}