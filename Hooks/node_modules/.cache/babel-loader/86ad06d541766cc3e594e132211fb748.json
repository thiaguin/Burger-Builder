{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Aux from '../../hoc/Aux';\nimport * as actions from '../../store/actions/index';\nimport './Auth.css';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        name: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Username'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          config: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 15\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      validForm: false\n    };\n\n    this.inputChangeHandler = (event, inputElement) => {\n      const rules = this.state.controls[inputElement].validation;\n      const updatedControls = { ...this.state.controls,\n        [inputElement]: { ...this.state.controls[inputElement],\n          value: event.target.value,\n          valid: this.checkValid(event.target.value, rules),\n          touched: true\n        }\n      };\n      const otherElement = inputElement === 'name' ? 'password' : 'name';\n      const validOtherElement = this.state.controls[otherElement].valid;\n      const validThisElement = updatedControls[inputElement].valid;\n      this.setState({\n        controls: updatedControls,\n        validForm: validThisElement && validOtherElement\n      });\n    };\n\n    this.checkValid = (value, rules) => {\n      let valid = true;\n      let changed = false;\n\n      if (rules) {\n        if (rules.required) {\n          valid = value.trim() !== '' && valid;\n          changed = true;\n        }\n\n        if (rules.minLength) {\n          valid = value.length >= rules.minLength && valid;\n          changed = true;\n        }\n\n        if (rules.maxLength) {\n          valid = value.length <= rules.maxLength && valid;\n          changed = true;\n        }\n\n        if (rules.isEmail) {\n          const emailRegex = /\\S+@\\S+\\.\\S+/;\n          changed = emailRegex.test(value);\n        }\n      }\n\n      return changed ? valid : false;\n    };\n\n    this.signinHandler = () => {\n      const username = this.state.controls.name.value;\n      const password = this.state.controls.password.value;\n      this.props.onAuthSubmit(username, password, true);\n    };\n\n    this.signupHandler = () => {\n      const username = this.state.controls.name.value;\n      const password = this.state.controls.password.value;\n      this.props.onAuthSubmit(username, password, false);\n    };\n  }\n\n  render() {\n    const inputs = [];\n\n    for (const key in this.state.controls) {\n      const input = React.createElement(Input, {\n        key: key,\n        elementType: this.state.controls[key].elementType,\n        config: this.state.controls[key].config,\n        value: this.state.controls[key].value,\n        invalid: !this.state.controls[key].valid,\n        shouldValidate: this.state.controls[key].validation,\n        touched: this.state.controls[key].touched,\n        changed: event => this.inputChangeHandler(event, key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n      inputs.push(input);\n    }\n\n    let form = React.createElement(\"div\", {\n      className: \"Auth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, inputs.length > 0 ? inputs : null), React.createElement(Button, {\n      btnType: \"Normal\",\n      disabled: !this.state.validForm,\n      clicked: this.signupHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.validForm,\n      clicked: this.signinHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Sign In\"));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      });\n    }\n\n    let error = null;\n\n    if (this.props.error) {\n      error = React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, this.props.error);\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, form, error);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    token: state.auth.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthSubmit: (username, password, isSignIn) => dispatch(actions.auth(username, password, isSignIn))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Input","Button","Spinner","Aux","actions","Auth","state","controls","name","elementType","config","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","maxLength","validForm","inputChangeHandler","event","inputElement","rules","updatedControls","target","checkValid","otherElement","validOtherElement","validThisElement","setState","changed","trim","length","emailRegex","test","signinHandler","username","props","onAuthSubmit","signupHandler","render","inputs","key","input","push","form","submitHandler","loading","error","textAlign","mapStateToProps","auth","token","mapDispatchToProps","dispatch","isSignIn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport Aux from '../../hoc/Aux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.css'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            name: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Username',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                elementType: 'input',\n                config: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                    maxLength: 15,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        validForm: false,\n    }\n\n    inputChangeHandler = (event, inputElement) => {\n        const rules = this.state.controls[inputElement].validation\n        const updatedControls = {\n            ...this.state.controls,\n            [inputElement]: {\n                ...this.state.controls[inputElement],\n                value: event.target.value,\n                valid: this.checkValid(event.target.value, rules),\n                touched: true,\n            },\n        }\n\n        const otherElement = inputElement === 'name' ? 'password' : 'name'\n        const validOtherElement = this.state.controls[otherElement].valid\n        const validThisElement = updatedControls[inputElement].valid\n\n        this.setState({\n            controls: updatedControls,\n            validForm: validThisElement && validOtherElement,\n        })\n    }\n\n    checkValid = (value, rules) => {\n        let valid = true\n        let changed = false\n\n        if (rules) {\n            if (rules.required) {\n                valid = value.trim() !== '' && valid\n                changed = true\n            }\n            if (rules.minLength) {\n                valid = value.length >= rules.minLength && valid\n                changed = true\n            }\n            if (rules.maxLength) {\n                valid = value.length <= rules.maxLength && valid\n                changed = true\n            }\n\n            if (rules.isEmail) {\n                const emailRegex = /\\S+@\\S+\\.\\S+/\n                changed = emailRegex.test(value)\n            }\n        }\n\n        return changed ? valid : false\n    }\n\n    signinHandler = () => {\n        const username = this.state.controls.name.value\n        const password = this.state.controls.password.value\n        this.props.onAuthSubmit(username, password, true)\n    }\n\n    signupHandler = () => {\n        const username = this.state.controls.name.value\n        const password = this.state.controls.password.value\n        this.props.onAuthSubmit(username, password, false)\n    }\n\n    render() {\n        const inputs = []\n\n        for (const key in this.state.controls) {\n            const input = (\n                <Input\n                    key={key}\n                    elementType={this.state.controls[key].elementType}\n                    config={this.state.controls[key].config}\n                    value={this.state.controls[key].value}\n                    invalid={!this.state.controls[key].valid}\n                    shouldValidate={this.state.controls[key].validation}\n                    touched={this.state.controls[key].touched}\n                    changed={(event) => this.inputChangeHandler(event, key)}\n                />\n            )\n            inputs.push(input)\n        }\n\n        let form = (\n            <div className='Auth'>\n                <form onSubmit={this.submitHandler}>{inputs.length > 0 ? inputs : null}</form>\n                <Button\n                    btnType='Normal'\n                    disabled={!this.state.validForm}\n                    clicked={this.signupHandler}\n                >\n                    Sign Up\n                </Button>\n                <Button\n                    btnType='Success'\n                    disabled={!this.state.validForm}\n                    clicked={this.signinHandler}\n                >\n                    Sign In\n                </Button>\n            </div>\n        )\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let error = null\n\n        if (this.props.error) {\n            error = <p style={{ textAlign: 'center' }}>{this.props.error}</p>\n        }\n        return (\n            <Aux>\n                {form}\n                {error}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        token: state.auth.token,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuthSubmit: (username, password, isSignIn) =>\n            dispatch(actions.auth(username, password, isSignIn)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n"]},"metadata":{},"sourceType":"module"}