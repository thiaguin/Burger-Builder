{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\nimport axios from '../../../axios-orders';\nimport './ContactData.css';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        postalCode: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Postal Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            maxLength: 8,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          config: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        delivery: {\n          elementType: 'select',\n          config: {\n            options: [{\n              value: 'fastest',\n              displayName: 'Fastest'\n            }, {\n              value: 'cheapset',\n              displayName: 'Cheapest'\n            }]\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      loading: false,\n      validFormData: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (const key in this.state.orderForm) {\n        formData[key] = this.state.orderForm[key].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      this.setState({\n        loading: true\n      });\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangeHandler = (event, inputElement) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const rules = updatedOrderForm[inputElement].validation;\n      const {\n        value\n      } = event.target;\n      let validForm = true;\n      updatedOrderForm[inputElement].value = value;\n      updatedOrderForm[inputElement].valid = this.checkValid(value, rules);\n      updatedOrderForm[inputElement].touched = true;\n\n      for (const key in updatedOrderForm) {\n        const value = updatedOrderForm[key];\n        validForm = validForm && value.valid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        validFormData: validForm\n      });\n    };\n\n    this.checkValid = (value, rules) => {\n      let valid = true;\n      let changed = false;\n\n      if (rules) {\n        if (rules.required) {\n          valid = value.trim() !== '' && valid;\n          changed = true;\n        }\n\n        if (rules.minLength) {\n          valid = value.length <= rules.minLength && valid;\n          changed = true;\n        }\n\n        if (rules.maxLength) {\n          valid = value.length >= rules.maxLength && valid;\n          changed = true;\n        }\n      }\n\n      return changed ? valid : false;\n    };\n  }\n\n  render() {\n    const inputs = [];\n\n    for (const key in this.state.orderForm) {\n      const input = React.createElement(Input, {\n        key: key,\n        elementType: this.state.orderForm[key].elementType,\n        config: this.state.orderForm[key].config,\n        value: this.state.orderForm[key].value,\n        invalid: !this.state.orderForm[key].valid,\n        shouldValidate: this.state.orderForm[key].validation,\n        touched: this.state.orderForm[key].touched,\n        changed: event => this.inputChangeHandler(event, key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      });\n      inputs.push(input);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ContactData\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Please enter with your datas!\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, inputs.length > 0 ? inputs : null, React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.validFormData,\n      clicked: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Order\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.ingredients\n  };\n};\n\nexport default ContactData;","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","Input","axios","ContactData","state","orderForm","name","elementType","config","type","placeholder","value","validation","required","valid","touched","email","street","postalCode","maxLength","minLength","country","delivery","options","displayName","loading","validFormData","orderHandler","event","preventDefault","formData","key","order","ingredients","props","price","orderData","setState","post","then","response","history","push","catch","error","inputChangeHandler","inputElement","updatedOrderForm","rules","target","validForm","checkValid","changed","trim","length","render","inputs","input","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Button from '../../../components/UI/Button/Button'\nimport Input from '../../../components/UI/Input/Input'\nimport axios from '../../../axios-orders'\nimport './ContactData.css'\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Your Email',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            postalCode: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Postal Code',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    maxLength: 8,\n                    minLength: 8,\n                },\n                valid: false,\n                touched: false,\n            },\n            country: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Country',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            delivery: {\n                elementType: 'select',\n                config: {\n                    options: [\n                        { value: 'fastest', displayName: 'Fastest' },\n                        { value: 'cheapset', displayName: 'Cheapest' },\n                    ],\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        loading: false,\n        validFormData: false,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault()\n        const formData = {}\n        for (const key in this.state.orderForm) {\n            formData[key] = this.state.orderForm[key].value\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData,\n        }\n\n        this.setState({ loading: true })\n        axios\n            .post('/orders.json', order)\n            .then((response) => {\n                this.setState({ loading: false })\n                this.props.history.push('/')\n            })\n            .catch((error) => {\n                this.setState({ loading: false })\n            })\n    }\n\n    inputChangeHandler = (event, inputElement) => {\n        const updatedOrderForm = { ...this.state.orderForm }\n        const rules = updatedOrderForm[inputElement].validation\n        const { value } = event.target\n        let validForm = true\n\n        updatedOrderForm[inputElement].value = value\n        updatedOrderForm[inputElement].valid = this.checkValid(value, rules)\n        updatedOrderForm[inputElement].touched = true\n\n        for (const key in updatedOrderForm) {\n            const value = updatedOrderForm[key]\n            validForm = validForm && value.valid\n        }\n\n        this.setState({ orderForm: updatedOrderForm, validFormData: validForm })\n    }\n\n    checkValid = (value, rules) => {\n        let valid = true\n        let changed = false\n\n        if (rules) {\n            if (rules.required) {\n                valid = value.trim() !== '' && valid\n                changed = true\n            }\n            if (rules.minLength) {\n                valid = value.length <= rules.minLength && valid\n                changed = true\n            }\n            if (rules.maxLength) {\n                valid = value.length >= rules.maxLength && valid\n                changed = true\n            }\n        }\n\n        return changed ? valid : false\n    }\n\n    render() {\n        const inputs = []\n\n        for (const key in this.state.orderForm) {\n            const input = (\n                <Input\n                    key={key}\n                    elementType={this.state.orderForm[key].elementType}\n                    config={this.state.orderForm[key].config}\n                    value={this.state.orderForm[key].value}\n                    invalid={!this.state.orderForm[key].valid}\n                    shouldValidate={this.state.orderForm[key].validation}\n                    touched={this.state.orderForm[key].touched}\n                    changed={(event) => this.inputChangeHandler(event, key)}\n                />\n            )\n            inputs.push(input)\n        }\n\n        return (\n            <div className='ContactData'>\n                <h4>Please enter with your datas!</h4>\n                <form>\n                    {inputs.length > 0 ? inputs : null}\n                    <Button\n                        btnType='Success'\n                        disabled={!this.state.validFormData}\n                        clicked={this.orderHandler}\n                    >\n                        Order\n                    </Button>\n                </form>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        ingredients: state.ingredients,\n    }\n}\nexport default ContactData\n"]},"metadata":{},"sourceType":"module"}