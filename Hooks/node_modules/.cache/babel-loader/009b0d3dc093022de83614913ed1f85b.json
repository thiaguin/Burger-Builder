{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nimport axios from 'axios';\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userId');\n  yield put(actions.authLogoutSucceed());\n}\nexport function* authLogoutAsyncSaga(action) {\n  yield delay(action.expiresTime * 1000);\n  yield put(actions.authLogout());\n}\nexport function* authSaga(action) {\n  const authData = {\n    email: action.username,\n    password: action.password,\n    returnSecureToken: true\n  };\n  const signUpUrl = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${process.env.APP_KEY}`;\n  const signInUrl = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${process.env.APP_KEY}`;\n  const url = action.isSignIn ? signInUrl : signUpUrl;\n\n  try {\n    yield put(actions.authStart());\n    const response = yield axios.post(url, authData);\n    const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    yield localStorage.setItem('token', response.data.idToken);\n    yield localStorage.setItem('expirationDate', expirationDate);\n    yield localStorage.setItem('userId', response.data.localId);\n    yield put(actions.authSuccess(response.data));\n    yield put(actions.authLogoutAsync(response.data.expiresIn));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data.error.message));\n  }\n}\nexport function* authCheckSaga(action) {\n  const token = yield localStorage.getItem('token');\n\n  if (token) {\n    const expirationDate = yield new Date(localStorage.getItem('expirationDate'));\n    const dateNow = yield new Date();\n\n    if (expirationDate > dateNow) {\n      const expiresIn = yield (expirationDate.getTime() - dateNow.getTime()) / 1000;\n      const data = {\n        localId: localStorage.getItem('userId'),\n        idToken: token,\n        expiresIn: expiresIn\n      };\n      yield put(actions.authSuccess(data));\n      yield put(actions.authLogoutAsync(expiresIn));\n    } else {\n      yield put(actions.authLogout());\n    }\n  } else {\n    yield put(actions.authLogout());\n  }\n}","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Hooks/src/store/sagas/auth.js"],"names":["put","delay","actions","axios","logoutSaga","action","localStorage","removeItem","authLogoutSucceed","authLogoutAsyncSaga","expiresTime","authLogout","authSaga","authData","email","username","password","returnSecureToken","signUpUrl","process","env","APP_KEY","signInUrl","url","isSignIn","authStart","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","authLogoutAsync","error","authFail","message","authCheckSaga","token","getItem","dateNow"],"mappings":"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","sourcesContent":["import { put, delay } from 'redux-saga/effects'\nimport * as actions from '../actions/index'\nimport axios from 'axios'\n\nexport function* logoutSaga(action) {\n    yield localStorage.removeItem('token')\n    yield localStorage.removeItem('expirationDate')\n    yield localStorage.removeItem('userId')\n\n    yield put(actions.authLogoutSucceed())\n}\n\nexport function* authLogoutAsyncSaga(action) {\n    yield delay(action.expiresTime * 1000)\n    yield put(actions.authLogout())\n}\n\nexport function* authSaga(action) {\n    const authData = {\n        email: action.username,\n        password: action.password,\n        returnSecureToken: true,\n    }\n    const signUpUrl = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${process.env.APP_KEY}`\n    const signInUrl = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${process.env.APP_KEY}`\n\n    const url = action.isSignIn ? signInUrl : signUpUrl\n\n    try {\n        yield put(actions.authStart())\n        const response = yield axios.post(url, authData)\n\n        const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000)\n\n        yield localStorage.setItem('token', response.data.idToken)\n        yield localStorage.setItem('expirationDate', expirationDate)\n        yield localStorage.setItem('userId', response.data.localId)\n\n        yield put(actions.authSuccess(response.data))\n        yield put(actions.authLogoutAsync(response.data.expiresIn))\n    } catch (error) {\n        yield put(actions.authFail(error.response.data.error.message))\n    }\n}\n\nexport function* authCheckSaga(action) {\n    const token = yield localStorage.getItem('token')\n\n    if (token) {\n        const expirationDate = yield new Date(localStorage.getItem('expirationDate'))\n        const dateNow = yield new Date()\n\n        if (expirationDate > dateNow) {\n            const expiresIn = yield (expirationDate.getTime() - dateNow.getTime()) / 1000\n            const data = {\n                localId: localStorage.getItem('userId'),\n                idToken: token,\n                expiresIn: expiresIn,\n            }\n\n            yield put(actions.authSuccess(data))\n            yield put(actions.authLogoutAsync(expiresIn))\n        } else {\n            yield put(actions.authLogout())\n        }\n    } else {\n        yield put(actions.authLogout())\n    }\n}\n"]},"metadata":{},"sourceType":"module"}