{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nimport axios from 'axios';\nexport function* logoutSaga(action) {\n  console.log('here');\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userId');\n  yield put(actions.authLogoutSucceed());\n}\nexport function* authLogoutAsyncSaga(action) {\n  yield delay(action.expiresTime * 1000);\n  yield put(actions.authLogout());\n}\nexport function* authSaga(action) {\n  const authData = {\n    email: action.username,\n    password: action.password,\n    returnSecureToken: true\n  };\n  const signUpUrl = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY';\n  const signInUrl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY';\n  const url = action.isSignIn ? signInUrl : signUpUrl;\n\n  try {\n    yield put(actions.authStart());\n    const response = yield axios.post(url, authData);\n    const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    yield localStorage.setItem('token', response.data.idToken);\n    yield localStorage.setItem('expirationDate', expirationDate);\n    yield localStorage.setItem('userId', response.data.localId);\n    yield put(actions.authSuccess(response.data));\n    yield put(actions.authLogoutAsync(response.data.expiresIn));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data.error.message));\n  }\n}\nexport function* authCheckSaga(action) {\n  const token = yield localStorage.getItem('token');\n\n  if (token) {\n    const expirationDate = yield new Date(localStorage.getItem('expirationDate'));\n    const dateNow = yield new Date();\n\n    if (expirationDate > dateNow) {\n      const expiresIn = yield (expirationDate.getTime() - dateNow.getTime()) / 1000;\n      const data = {\n        localId: localStorage.getItem('userId'),\n        idToken: token,\n        expiresIn: expiresIn\n      };\n      yield put(actions.authSuccess(data));\n      yield put(actions.authLogoutAsync(expiresIn));\n    } else {\n      yield put(actions.authLogout());\n    }\n  } else {\n    yield put(actions.authLogout());\n  }\n}","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Saga/src/store/sagas/auth.js"],"names":["put","delay","actions","axios","logoutSaga","action","console","log","localStorage","removeItem","authLogoutSucceed","authLogoutAsyncSaga","expiresTime","authLogout","authSaga","authData","email","username","password","returnSecureToken","signUpUrl","signInUrl","url","isSignIn","authStart","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","authLogoutAsync","error","authFail","message","authCheckSaga","token","getItem","dateNow"],"mappings":"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","sourcesContent":["import { put, delay } from 'redux-saga/effects'\nimport * as actions from '../actions/index'\nimport axios from 'axios'\n\nexport function* logoutSaga(action) {\n    console.log('here')\n    yield localStorage.removeItem('token')\n    yield localStorage.removeItem('expirationDate')\n    yield localStorage.removeItem('userId')\n\n    yield put(actions.authLogoutSucceed())\n}\n\nexport function* authLogoutAsyncSaga(action) {\n    yield delay(action.expiresTime * 1000)\n    yield put(actions.authLogout())\n}\n\nexport function* authSaga(action) {\n    const authData = {\n        email: action.username,\n        password: action.password,\n        returnSecureToken: true,\n    }\n    const signUpUrl =\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY'\n    const signInUrl =\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDKbV6ttrbEDvWY4e2YCUo-ST6GxKX8lAY'\n\n    const url = action.isSignIn ? signInUrl : signUpUrl\n\n    try {\n        yield put(actions.authStart())\n        const response = yield axios.post(url, authData)\n\n        const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000)\n\n        yield localStorage.setItem('token', response.data.idToken)\n        yield localStorage.setItem('expirationDate', expirationDate)\n        yield localStorage.setItem('userId', response.data.localId)\n\n        yield put(actions.authSuccess(response.data))\n        yield put(actions.authLogoutAsync(response.data.expiresIn))\n    } catch (error) {\n        yield put(actions.authFail(error.response.data.error.message))\n    }\n}\n\nexport function* authCheckSaga(action) {\n    const token = yield localStorage.getItem('token')\n\n    if (token) {\n        const expirationDate = yield new Date(localStorage.getItem('expirationDate'))\n        const dateNow = yield new Date()\n        if (expirationDate > dateNow) {\n            const expiresIn = yield (expirationDate.getTime() - dateNow.getTime()) / 1000\n            const data = {\n                localId: localStorage.getItem('userId'),\n                idToken: token,\n                expiresIn: expiresIn,\n            }\n            yield put(actions.authSuccess(data))\n            yield put(actions.authLogoutAsync(expiresIn))\n        } else {\n            yield put(actions.authLogout())\n        }\n    } else {\n        yield put(actions.authLogout())\n    }\n}\n"]},"metadata":{},"sourceType":"module"}