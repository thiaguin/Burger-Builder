{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Orders/Orders.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler';\nimport * as actions from '../../store/actions/index';\n\nconst orders = props => {\n  // const { token, userId, onFetchOrders } = props\n  // useEffect()\n  // // useEffect(() => {\n  // //     props.onFetchOrders(props.token, props.userId)\n  // // }, [props])\n  let orders = React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  });\n  const isAuth = !!props.token;\n\n  if (!props.loading && isAuth) {\n    orders = props.orders.map(order => {\n      return React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      });\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, orders);\n};\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(orders, axios));","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Orders/Orders.js"],"names":["React","useEffect","connect","Order","Spinner","axios","withErrorHandler","actions","orders","props","isAuth","token","loading","map","order","id","ingredients","price","mapStateToProps","state","auth","userId","mapDispatchToProps","dispatch","onFetchOrders","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB;AAEA;AACA;AACA;AACA;AAEA,MAAID,MAAM,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAb;AACA,QAAME,MAAM,GAAG,CAAC,CAACD,KAAK,CAACE,KAAvB;;AAEA,MAAI,CAACF,KAAK,CAACG,OAAP,IAAkBF,MAAtB,EAA8B;AAC1BF,IAAAA,MAAM,GAAGC,KAAK,CAACD,MAAN,CAAaK,GAAb,CAAkBC,KAAD,IAAW;AACjC,aAAO,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,QAAA,WAAW,EAAED,KAAK,CAACE,WAAzC;AAAsD,QAAA,KAAK,EAAEF,KAAK,CAACG,KAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFQ,CAAT;AAGH;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMT,MAAN,CAAP;AACH,CAlBD;;AAoBA,MAAMU,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHX,IAAAA,MAAM,EAAEW,KAAK,CAACL,KAAN,CAAYN,MADjB;AAEHI,IAAAA,OAAO,EAAEO,KAAK,CAACL,KAAN,CAAYF,OAFlB;AAGHD,IAAAA,KAAK,EAAEQ,KAAK,CAACC,IAAN,CAAWT,KAHf;AAIHU,IAAAA,MAAM,EAAEF,KAAK,CAACC,IAAN,CAAWC;AAJhB,GAAP;AAMH,CAPD;;AAQA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHC,IAAAA,aAAa,EAAE,CAACb,KAAD,EAAQU,MAAR,KAAmBE,QAAQ,CAAChB,OAAO,CAACkB,WAAR,CAAoBd,KAApB,EAA2BU,MAA3B,CAAD;AADvC,GAAP;AAGH,CAJD;;AAKA,eAAenB,OAAO,CAACgB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ChB,gBAAgB,CAACE,MAAD,EAASH,KAAT,CAA7D,CAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport Order from '../../components/Order/Order'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport axios from '../../axios-orders'\nimport withErrorHandler from '../../hoc/withErrorHandler'\nimport * as actions from '../../store/actions/index'\n\nconst orders = (props) => {\n    // const { token, userId, onFetchOrders } = props\n\n    // useEffect()\n    // // useEffect(() => {\n    // //     props.onFetchOrders(props.token, props.userId)\n    // // }, [props])\n\n    let orders = <Spinner />\n    const isAuth = !!props.token\n\n    if (!props.loading && isAuth) {\n        orders = props.orders.map((order) => {\n            return <Order key={order.id} ingredients={order.ingredients} price={order.price} />\n        })\n    }\n\n    return <div>{orders}</div>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(orders, axios))\n"]},"metadata":{},"sourceType":"module"}