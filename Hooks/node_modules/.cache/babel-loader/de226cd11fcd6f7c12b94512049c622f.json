{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Auth/Auth.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { validateForm } from '../../util/util';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Aux from '../../hoc/Aux';\nimport * as actions from '../../store/actions/index';\nimport './Auth.css';\n\nconst Auth = props => {\n  const controlsObj = {\n    name: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Username'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      config: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6,\n        maxLength: 15\n      },\n      valid: false,\n      touched: false\n    }\n  };\n  const [controls, setControls] = useState(controlsObj);\n  const [validForm, setValidForm] = useState(false);\n  const buildingBurger = useSelector(state => state.burgerBuilder.building);\n  const redirectPath = useSelector(state => state.auth.redirectPath);\n  const dispatch = useDispatch();\n  const onAuthRedirect = useCallback(() => dispatch(actions.authRedirectPath('/')), [dispatch]);\n  useEffect(() => {\n    if (!buildingBurger && redirectPath !== '/') {\n      onAuthRedirect();\n    }\n  }, [buildingBurger, redirectPath, onAuthRedirect]);\n\n  const inputChangeHandler = (event, inputElement) => {\n    const rules = controls[inputElement].validation;\n    const updatedControls = { ...controls,\n      [inputElement]: { ...controls[inputElement],\n        value: event.target.value,\n        valid: validateForm(event.target.value, rules),\n        touched: true\n      }\n    };\n    const otherElement = inputElement === 'name' ? 'password' : 'name';\n    const validOtherElement = controls[otherElement].valid;\n    const validThisElement = updatedControls[inputElement].valid;\n    setControls(updatedControls);\n    setValidForm(validThisElement && validOtherElement);\n  };\n\n  const signinHandler = () => {\n    const username = controls.name.value;\n    const password = controls.password.value;\n    props.onAuthSubmit(username, password, true);\n  };\n\n  const signupHandler = () => {\n    const username = controls.name.value;\n    const password = controls.password.value;\n    props.onAuthSubmit(username, password, false);\n  };\n\n  const inputs = [];\n\n  for (const key in controls) {\n    const input = React.createElement(Input, {\n      key: key,\n      elementType: controls[key].elementType,\n      config: controls[key].config,\n      value: controls[key].value,\n      invalid: !controls[key].valid,\n      shouldValidate: controls[key].validation,\n      touched: controls[key].touched,\n      changed: event => inputChangeHandler(event, key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    });\n    inputs.push(input);\n  }\n\n  let form = React.createElement(\"div\", {\n    className: \"Auth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, inputs.length > 0 ? inputs : null), React.createElement(Button, {\n    btnType: \"Normal\",\n    disabled: !validForm,\n    clicked: signupHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Sign Up\"), React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !validForm,\n    clicked: signinHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Sign In\"));\n\n  if (props.loading) {\n    form = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n  }\n\n  let error = null;\n\n  if (props.error) {\n    error = React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, props.error);\n  }\n\n  let isAuthenticated = null;\n\n  if (props.isAuthenticated) {\n    isAuthenticated = React.createElement(Redirect, {\n      to: redirectPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Aux, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, isAuthenticated, form, error);\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthSubmit: (username, password, isSignIn) => dispatch(actions.auth(username, password, isSignIn))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Auth/Auth.js"],"names":["React","useState","useEffect","useCallback","Redirect","connect","useDispatch","useSelector","validateForm","Input","Button","Spinner","Aux","actions","Auth","props","controlsObj","name","elementType","config","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","maxLength","controls","setControls","validForm","setValidForm","buildingBurger","state","burgerBuilder","building","redirectPath","auth","dispatch","onAuthRedirect","authRedirectPath","inputChangeHandler","event","inputElement","rules","updatedControls","target","otherElement","validOtherElement","validThisElement","signinHandler","username","onAuthSubmit","signupHandler","inputs","key","input","push","form","length","loading","error","textAlign","isAuthenticated","mapStateToProps","token","mapDispatchToProps","isSignIn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport { validateForm } from '../../util/util'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport Aux from '../../hoc/Aux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.css'\n\nconst Auth = (props) => {\n    const controlsObj = {\n        name: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Username',\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        password: {\n            elementType: 'input',\n            config: {\n                type: 'password',\n                placeholder: 'Password',\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6,\n                maxLength: 15,\n            },\n            valid: false,\n            touched: false,\n        },\n    }\n\n    const [controls, setControls] = useState(controlsObj)\n    const [validForm, setValidForm] = useState(false)\n\n    const buildingBurger = useSelector((state) => state.burgerBuilder.building)\n    const redirectPath = useSelector((state) => state.auth.redirectPath)\n    const dispatch = useDispatch()\n    const onAuthRedirect = useCallback(() => dispatch(actions.authRedirectPath('/')), [dispatch])\n\n    useEffect(() => {\n        if (!buildingBurger && redirectPath !== '/') {\n            onAuthRedirect()\n        }\n    }, [buildingBurger, redirectPath, onAuthRedirect])\n\n    const inputChangeHandler = (event, inputElement) => {\n        const rules = controls[inputElement].validation\n        const updatedControls = {\n            ...controls,\n            [inputElement]: {\n                ...controls[inputElement],\n                value: event.target.value,\n                valid: validateForm(event.target.value, rules),\n                touched: true,\n            },\n        }\n\n        const otherElement = inputElement === 'name' ? 'password' : 'name'\n        const validOtherElement = controls[otherElement].valid\n        const validThisElement = updatedControls[inputElement].valid\n\n        setControls(updatedControls)\n        setValidForm(validThisElement && validOtherElement)\n    }\n\n    const signinHandler = () => {\n        const username = controls.name.value\n        const password = controls.password.value\n        props.onAuthSubmit(username, password, true)\n    }\n\n    const signupHandler = () => {\n        const username = controls.name.value\n        const password = controls.password.value\n        props.onAuthSubmit(username, password, false)\n    }\n\n    const inputs = []\n\n    for (const key in controls) {\n        const input = (\n            <Input\n                key={key}\n                elementType={controls[key].elementType}\n                config={controls[key].config}\n                value={controls[key].value}\n                invalid={!controls[key].valid}\n                shouldValidate={controls[key].validation}\n                touched={controls[key].touched}\n                changed={(event) => inputChangeHandler(event, key)}\n            />\n        )\n        inputs.push(input)\n    }\n\n    let form = (\n        <div className='Auth'>\n            <form>{inputs.length > 0 ? inputs : null}</form>\n            <Button btnType='Normal' disabled={!validForm} clicked={signupHandler}>\n                Sign Up\n            </Button>\n            <Button btnType='Success' disabled={!validForm} clicked={signinHandler}>\n                Sign In\n            </Button>\n        </div>\n    )\n\n    if (props.loading) {\n        form = <Spinner />\n    }\n\n    let error = null\n\n    if (props.error) {\n        error = <p style={{ textAlign: 'center' }}>{props.error}</p>\n    }\n\n    let isAuthenticated = null\n\n    if (props.isAuthenticated) {\n        isAuthenticated = <Redirect to={redirectPath} />\n    }\n\n    return (\n        <Aux>\n            {isAuthenticated}\n            {form}\n            {error}\n        </Aux>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuthSubmit: (username, password, isSignIn) =>\n            dispatch(actions.auth(username, password, isSignIn)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n"]},"metadata":{},"sourceType":"module"}