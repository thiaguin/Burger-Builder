{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { validateForm } from '../../../util/util';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../../hoc/withErrorHandler';\nimport axios from '../../../axios-orders';\nimport * as actions from '../../../store/actions/index';\nimport './ContactData.css';\n\nconst ContactData = props => {\n  const orderFormObj = {\n    name: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Your Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Your Email'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    postalCode: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Postal Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        maxLength: 8,\n        minLength: 8\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    delivery: {\n      elementType: 'select',\n      config: {\n        options: [{\n          value: 'fastest',\n          displayName: 'Fastest'\n        }, {\n          value: 'cheapset',\n          displayName: 'Cheapest'\n        }]\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    }\n  };\n  const [orderForm, setOrderForm] = useState(orderFormObj);\n  const [validForm, setValidForm] = useState(false); //     loading: false,\n  //     validFormData: false,\n  // }\n\n  const orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n\n    for (const key in state.orderForm) {\n      formData[key] = state.orderForm[key].value;\n    }\n\n    const order = {\n      ingredients: props.ingredients,\n      price: props.price,\n      orderData: formData,\n      userId: props.userId\n    };\n    props.onBurgerPurchase(order, props.token);\n  };\n\n  const inputChangeHandler = (event, inputElement) => {\n    const updatedOrderForm = { ...state.orderForm\n    };\n    const rules = updatedOrderForm[inputElement].validation;\n    const {\n      value\n    } = event.target;\n    let validForm = true;\n    updatedOrderForm[inputElement].value = value;\n    updatedOrderForm[inputElement].valid = validateForm(value, rules);\n    updatedOrderForm[inputElement].touched = true;\n\n    for (const key in updatedOrderForm) {\n      const value = updatedOrderForm[key];\n      validForm = validForm && value.valid;\n    }\n\n    setState({\n      orderForm: updatedOrderForm,\n      validFormData: validForm\n    });\n  };\n\n  const inputs = [];\n\n  for (const key in state.orderForm) {\n    const input = React.createElement(Input, {\n      key: key,\n      elementType: state.orderForm[key].elementType,\n      config: state.orderForm[key].config,\n      value: state.orderForm[key].value,\n      invalid: !state.orderForm[key].valid,\n      shouldValidate: state.orderForm[key].validation,\n      touched: state.orderForm[key].touched,\n      changed: event => inputChangeHandler(event, key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    });\n    inputs.push(input);\n  }\n\n  let form = React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, inputs.length > 0 ? inputs : null, React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !state.validFormData,\n    clicked: orderHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Order\"));\n\n  if (props.loading) {\n    form = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"ContactData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Please enter with your datas!\"), form);\n};\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.price,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onBurgerPurchase: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","useState","connect","validateForm","Button","Input","Spinner","withErrorHandler","axios","actions","ContactData","props","orderFormObj","name","elementType","config","type","placeholder","value","validation","required","valid","touched","email","street","postalCode","maxLength","minLength","country","delivery","options","displayName","orderForm","setOrderForm","validForm","setValidForm","orderHandler","event","preventDefault","formData","key","state","order","ingredients","price","orderData","userId","onBurgerPurchase","token","inputChangeHandler","inputElement","updatedOrderForm","rules","target","setState","validFormData","inputs","input","push","form","length","loading","mapStateToProps","burgerBuilder","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { validateForm } from '../../../util/util'\nimport Button from '../../../components/UI/Button/Button'\nimport Input from '../../../components/UI/Input/Input'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport withErrorHandler from '../../../hoc/withErrorHandler'\nimport axios from '../../../axios-orders'\nimport * as actions from '../../../store/actions/index'\nimport './ContactData.css'\n\nconst ContactData = (props) => {\n    const orderFormObj = {\n        name: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Your Name',\n            },\n            value: '',\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        email: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Your Email',\n            },\n            value: '',\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        street: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Street',\n            },\n            value: '',\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        postalCode: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Postal Code',\n            },\n            value: '',\n            validation: {\n                required: true,\n                maxLength: 8,\n                minLength: 8,\n            },\n            valid: false,\n            touched: false,\n        },\n        country: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Country',\n            },\n            value: '',\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        delivery: {\n            elementType: 'select',\n            config: {\n                options: [\n                    { value: 'fastest', displayName: 'Fastest' },\n                    { value: 'cheapset', displayName: 'Cheapest' },\n                ],\n            },\n            value: '',\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false,\n        },\n    }\n\n    const [orderForm, setOrderForm] = useState(orderFormObj)\n    const [validForm, setValidForm] = useState(false)\n\n    //     loading: false,\n    //     validFormData: false,\n    // }\n\n    const orderHandler = (event) => {\n        event.preventDefault()\n        const formData = {}\n        for (const key in state.orderForm) {\n            formData[key] = state.orderForm[key].value\n        }\n        const order = {\n            ingredients: props.ingredients,\n            price: props.price,\n            orderData: formData,\n            userId: props.userId,\n        }\n\n        props.onBurgerPurchase(order, props.token)\n    }\n\n    const inputChangeHandler = (event, inputElement) => {\n        const updatedOrderForm = { ...state.orderForm }\n        const rules = updatedOrderForm[inputElement].validation\n        const { value } = event.target\n        let validForm = true\n\n        updatedOrderForm[inputElement].value = value\n        updatedOrderForm[inputElement].valid = validateForm(value, rules)\n        updatedOrderForm[inputElement].touched = true\n\n        for (const key in updatedOrderForm) {\n            const value = updatedOrderForm[key]\n            validForm = validForm && value.valid\n        }\n\n        setState({ orderForm: updatedOrderForm, validFormData: validForm })\n    }\n\n    const inputs = []\n\n    for (const key in state.orderForm) {\n        const input = (\n            <Input\n                key={key}\n                elementType={state.orderForm[key].elementType}\n                config={state.orderForm[key].config}\n                value={state.orderForm[key].value}\n                invalid={!state.orderForm[key].valid}\n                shouldValidate={state.orderForm[key].validation}\n                touched={state.orderForm[key].touched}\n                changed={(event) => inputChangeHandler(event, key)}\n            />\n        )\n        inputs.push(input)\n    }\n\n    let form = (\n        <form>\n            {inputs.length > 0 ? inputs : null}\n            <Button btnType='Success' disabled={!state.validFormData} clicked={orderHandler}>\n                Order\n            </Button>\n        </form>\n    )\n\n    if (props.loading) {\n        form = <Spinner />\n    }\n\n    return (\n        <div className='ContactData'>\n            <h4>Please enter with your datas!</h4>\n            {form}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.price,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onBurgerPurchase: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))\n"]},"metadata":{},"sourceType":"module"}