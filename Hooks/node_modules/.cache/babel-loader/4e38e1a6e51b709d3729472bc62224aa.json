{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Auth/Auth.js\";\nimport React, { Component, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { validateForm } from '../../util/util';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Aux from '../../hoc/Aux';\nimport * as actions from '../../store/actions/index';\nimport './Auth.css';\n\nconst Auth = props => {\n  const controlsObj = {\n    name: {\n      elementType: 'input',\n      config: {\n        type: 'text',\n        placeholder: 'Username'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      config: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6,\n        maxLength: 15\n      },\n      valid: false,\n      touched: false\n    }\n  };\n  const [controls, setControls] = useState(controlsObj);\n  const [validForm, setValidForm] = useState(false); // componentDidMount() {\n  //     if (!props.buildingBurger && props.redirectPath !== '/') {\n  //         props.onAuthRedirect()\n  //     }\n  // }\n\n  const inputChangeHandler = (event, inputElement) => {\n    const rules = controls[inputElement].validation;\n    const updatedControls = { ...controls,\n      [inputElement]: { ...controls[inputElement],\n        value: event.target.value,\n        valid: validateForm(event.target.value, rules),\n        touched: true\n      }\n    };\n    const otherElement = inputElement === 'name' ? 'password' : 'name';\n    const validOtherElement = controls[otherElement].valid;\n    const validThisElement = updatedControls[inputElement].valid;\n    setControls(updatedControls);\n    setValidForm(validThisElement && validOtherElement);\n  };\n\n  const signinHandler = () => {\n    const username = controls.name.value;\n    const password = controls.password.value;\n    props.onAuthSubmit(username, password, true);\n  };\n\n  const signupHandler = () => {\n    const username = controls.name.value;\n    const password = controls.password.value;\n    props.onAuthSubmit(username, password, false);\n  };\n\n  const inputs = [];\n\n  for (const key in state.controls) {\n    const input = React.createElement(Input, {\n      key: key,\n      elementType: state.controls[key].elementType,\n      config: state.controls[key].config,\n      value: state.controls[key].value,\n      invalid: !state.controls[key].valid,\n      shouldValidate: state.controls[key].validation,\n      touched: state.controls[key].touched,\n      changed: event => inputChangeHandler(event, key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    });\n    inputs.push(input);\n  }\n\n  let form = React.createElement(\"div\", {\n    className: \"Auth\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, inputs.length > 0 ? inputs : null), React.createElement(Button, {\n    btnType: \"Normal\",\n    disabled: !state.validForm,\n    clicked: signupHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Sign Up\"), React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !state.validForm,\n    clicked: signinHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Sign In\"));\n\n  if (props.loading) {\n    form = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    });\n  }\n\n  let error = null;\n\n  if (props.error) {\n    error = React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, props.error);\n  }\n\n  let isAuthenticated = null;\n\n  if (props.isAuthenticated) {\n    isAuthenticated = React.createElement(Redirect, {\n      to: props.redirectPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Aux, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, isAuthenticated, form, error);\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token,\n    buildingBurger: state.burgerBuilder.building,\n    redirectPath: state.auth.redirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthSubmit: (username, password, isSignIn) => dispatch(actions.auth(username, password, isSignIn)),\n    onAuthRedirect: () => dispatch(actions.authRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Auth/Auth.js"],"names":["React","Component","useState","Redirect","connect","validateForm","Input","Button","Spinner","Aux","actions","Auth","props","controlsObj","name","elementType","config","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","maxLength","controls","setControls","validForm","setValidForm","inputChangeHandler","event","inputElement","rules","updatedControls","target","otherElement","validOtherElement","validThisElement","signinHandler","username","onAuthSubmit","signupHandler","inputs","key","state","input","push","form","submitHandler","length","loading","error","textAlign","isAuthenticated","redirectPath","mapStateToProps","auth","token","buildingBurger","burgerBuilder","building","mapDispatchToProps","dispatch","isSignIn","onAuthRedirect","authRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { validateForm } from '../../util/util'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport Aux from '../../hoc/Aux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.css'\n\nconst Auth = (props) => {\n    const controlsObj = {\n        name: {\n            elementType: 'input',\n            config: {\n                type: 'text',\n                placeholder: 'Username',\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true,\n            },\n            valid: false,\n            touched: false,\n        },\n        password: {\n            elementType: 'input',\n            config: {\n                type: 'password',\n                placeholder: 'Password',\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6,\n                maxLength: 15,\n            },\n            valid: false,\n            touched: false,\n        },\n    }\n\n    const [controls, setControls] = useState(controlsObj)\n    const [validForm, setValidForm] = useState(false)\n\n    // componentDidMount() {\n    //     if (!props.buildingBurger && props.redirectPath !== '/') {\n    //         props.onAuthRedirect()\n    //     }\n    // }\n\n    const inputChangeHandler = (event, inputElement) => {\n        const rules = controls[inputElement].validation\n        const updatedControls = {\n            ...controls,\n            [inputElement]: {\n                ...controls[inputElement],\n                value: event.target.value,\n                valid: validateForm(event.target.value, rules),\n                touched: true,\n            },\n        }\n\n        const otherElement = inputElement === 'name' ? 'password' : 'name'\n        const validOtherElement = controls[otherElement].valid\n        const validThisElement = updatedControls[inputElement].valid\n\n        setControls(updatedControls)\n        setValidForm(validThisElement && validOtherElement)\n    }\n\n    const signinHandler = () => {\n        const username = controls.name.value\n        const password = controls.password.value\n        props.onAuthSubmit(username, password, true)\n    }\n\n    const signupHandler = () => {\n        const username = controls.name.value\n        const password = controls.password.value\n        props.onAuthSubmit(username, password, false)\n    }\n\n    const inputs = []\n\n    for (const key in state.controls) {\n        const input = (\n            <Input\n                key={key}\n                elementType={state.controls[key].elementType}\n                config={state.controls[key].config}\n                value={state.controls[key].value}\n                invalid={!state.controls[key].valid}\n                shouldValidate={state.controls[key].validation}\n                touched={state.controls[key].touched}\n                changed={(event) => inputChangeHandler(event, key)}\n            />\n        )\n        inputs.push(input)\n    }\n\n    let form = (\n        <div className='Auth'>\n            <form onSubmit={submitHandler}>{inputs.length > 0 ? inputs : null}</form>\n            <Button btnType='Normal' disabled={!state.validForm} clicked={signupHandler}>\n                Sign Up\n            </Button>\n            <Button btnType='Success' disabled={!state.validForm} clicked={signinHandler}>\n                Sign In\n            </Button>\n        </div>\n    )\n\n    if (props.loading) {\n        form = <Spinner />\n    }\n\n    let error = null\n\n    if (props.error) {\n        error = <p style={{ textAlign: 'center' }}>{props.error}</p>\n    }\n\n    let isAuthenticated = null\n\n    if (props.isAuthenticated) {\n        isAuthenticated = <Redirect to={props.redirectPath} />\n    }\n\n    return (\n        <Aux>\n            {isAuthenticated}\n            {form}\n            {error}\n        </Aux>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token,\n        buildingBurger: state.burgerBuilder.building,\n        redirectPath: state.auth.redirectPath,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuthSubmit: (username, password, isSignIn) =>\n            dispatch(actions.auth(username, password, isSignIn)),\n        onAuthRedirect: () => dispatch(actions.authRedirectPath('/')),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n"]},"metadata":{},"sourceType":"module"}