{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { validateForm } from '../../../util/util';\nimport Button from '../../../components/UI/Button/Button';\nimport Input from '../../../components/UI/Input/Input';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../../hoc/withErrorHandler';\nimport axios from '../../../axios-orders';\nimport * as actions from '../../../store/actions/index';\nimport './ContactData.css';\n\nconst ContactData = props => {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        config: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        config: {\n          type: 'text',\n          placeholder: 'Your Email'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        config: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      postalCode: {\n        elementType: 'input',\n        config: {\n          type: 'text',\n          placeholder: 'Postal Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          maxLength: 8,\n          minLength: 8\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        config: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      delivery: {\n        elementType: 'select',\n        config: {\n          options: [{\n            value: 'fastest',\n            displayName: 'Fastest'\n          }, {\n            value: 'cheapset',\n            displayName: 'Cheapest'\n          }]\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    loading: false,\n    validFormData: false\n  };\n\n  orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n\n    for (const key in this.state.orderForm) {\n      formData[key] = this.state.orderForm[key].value;\n    }\n\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n    this.props.onBurgerPurchase(order, this.props.token);\n  };\n\n  inputChangeHandler = (event, inputElement) => {\n    const updatedOrderForm = { ...this.state.orderForm\n    };\n    const rules = updatedOrderForm[inputElement].validation;\n    const {\n      value\n    } = event.target;\n    let validForm = true;\n    updatedOrderForm[inputElement].value = value;\n    updatedOrderForm[inputElement].valid = validateForm(value, rules);\n    updatedOrderForm[inputElement].touched = true;\n\n    for (const key in updatedOrderForm) {\n      const value = updatedOrderForm[key];\n      validForm = validForm && value.valid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      validFormData: validForm\n    });\n  };\n\n  const inputs = [];\n\n  for (const key in this.state.orderForm) {\n    const input = React.createElement(Input, {\n      key: key,\n      elementType: this.state.orderForm[key].elementType,\n      config: this.state.orderForm[key].config,\n      value: this.state.orderForm[key].value,\n      invalid: !this.state.orderForm[key].valid,\n      shouldValidate: this.state.orderForm[key].validation,\n      touched: this.state.orderForm[key].touched,\n      changed: event => this.inputChangeHandler(event, key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    });\n    inputs.push(input);\n  }\n\n  let form = React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, inputs.length > 0 ? inputs : null, React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !this.state.validFormData,\n    clicked: this.orderHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Order\"));\n\n  if (this.props.loading) {\n    form = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"ContactData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Please enter with your datas!\"), form);\n};\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.price,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onBurgerPurchase: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/thiago/Documentos/react/burger-builder/Hooks/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","validateForm","Button","Input","Spinner","withErrorHandler","axios","actions","ContactData","props","state","orderForm","name","elementType","config","type","placeholder","value","validation","required","valid","touched","email","street","postalCode","maxLength","minLength","country","delivery","options","displayName","loading","validFormData","orderHandler","event","preventDefault","formData","key","order","ingredients","price","orderData","userId","onBurgerPurchase","token","inputChangeHandler","inputElement","updatedOrderForm","rules","target","validForm","setState","inputs","input","push","form","length","mapStateToProps","burgerBuilder","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { validateForm } from '../../../util/util'\nimport Button from '../../../components/UI/Button/Button'\nimport Input from '../../../components/UI/Input/Input'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport withErrorHandler from '../../../hoc/withErrorHandler'\nimport axios from '../../../axios-orders'\nimport * as actions from '../../../store/actions/index'\nimport './ContactData.css'\n\nconst ContactData = (props) => {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Your Email',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            postalCode: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Postal Code',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    maxLength: 8,\n                    minLength: 8,\n                },\n                valid: false,\n                touched: false,\n            },\n            country: {\n                elementType: 'input',\n                config: {\n                    type: 'text',\n                    placeholder: 'Country',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            delivery: {\n                elementType: 'select',\n                config: {\n                    options: [\n                        { value: 'fastest', displayName: 'Fastest' },\n                        { value: 'cheapset', displayName: 'Cheapest' },\n                    ],\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        loading: false,\n        validFormData: false,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault()\n        const formData = {}\n        for (const key in this.state.orderForm) {\n            formData[key] = this.state.orderForm[key].value\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId,\n        }\n\n        this.props.onBurgerPurchase(order, this.props.token)\n    }\n\n    inputChangeHandler = (event, inputElement) => {\n        const updatedOrderForm = { ...this.state.orderForm }\n        const rules = updatedOrderForm[inputElement].validation\n        const { value } = event.target\n        let validForm = true\n\n        updatedOrderForm[inputElement].value = value\n        updatedOrderForm[inputElement].valid = validateForm(value, rules)\n        updatedOrderForm[inputElement].touched = true\n\n        for (const key in updatedOrderForm) {\n            const value = updatedOrderForm[key]\n            validForm = validForm && value.valid\n        }\n\n        this.setState({ orderForm: updatedOrderForm, validFormData: validForm })\n    }\n\n    const inputs = []\n\n    for (const key in this.state.orderForm) {\n        const input = (\n            <Input\n                key={key}\n                elementType={this.state.orderForm[key].elementType}\n                config={this.state.orderForm[key].config}\n                value={this.state.orderForm[key].value}\n                invalid={!this.state.orderForm[key].valid}\n                shouldValidate={this.state.orderForm[key].validation}\n                touched={this.state.orderForm[key].touched}\n                changed={(event) => this.inputChangeHandler(event, key)}\n            />\n        )\n        inputs.push(input)\n    }\n\n    let form = (\n        <form>\n            {inputs.length > 0 ? inputs : null}\n            <Button\n                btnType='Success'\n                disabled={!this.state.validFormData}\n                clicked={this.orderHandler}\n            >\n                Order\n            </Button>\n        </form>\n    )\n\n    if (this.props.loading) {\n        form = <Spinner />\n    }\n\n    return (\n        <div className='ContactData'>\n            <h4>Please enter with your datas!</h4>\n            {form}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.price,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onBurgerPurchase: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))\n"]},"metadata":{},"sourceType":"module"}